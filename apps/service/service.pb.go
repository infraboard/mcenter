// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.26.0
// source: mcenter/apps/service/pb/service.proto

package service

import (
	request "github.com/infraboard/mcube/v2/pb/request"
	resource "github.com/infraboard/mcube/v2/pb/resource"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Type int32

const (
	// 源码类型的应用, 需要填写代码仓库信息
	Type_SOURCE_CODE Type = 0
	// 镜像类型的应用, 需要添加镜像信息
	Type_CONTAINER_IMAGE Type = 1
	// 其他类型
	Type_OTHER Type = 15
)

// Enum value maps for Type.
var (
	Type_name = map[int32]string{
		0:  "SOURCE_CODE",
		1:  "CONTAINER_IMAGE",
		15: "OTHER",
	}
	Type_value = map[string]int32{
		"SOURCE_CODE":     0,
		"CONTAINER_IMAGE": 1,
		"OTHER":           15,
	}
)

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}

func (x Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Type) Descriptor() protoreflect.EnumDescriptor {
	return file_mcenter_apps_service_pb_service_proto_enumTypes[0].Descriptor()
}

func (Type) Type() protoreflect.EnumType {
	return &file_mcenter_apps_service_pb_service_proto_enumTypes[0]
}

func (x Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Type.Descriptor instead.
func (Type) EnumDescriptor() ([]byte, []int) {
	return file_mcenter_apps_service_pb_service_proto_rawDescGZIP(), []int{0}
}

// SCM_TYPE 源码仓库类型
type SCM_PROVIDER int32

const (
	// gitlab
	SCM_PROVIDER_GITLAB SCM_PROVIDER = 0
	// github
	SCM_PROVIDER_GITHUB SCM_PROVIDER = 1
	// coding.net
	SCM_PROVIDER_CODING SCM_PROVIDER = 2
)

// Enum value maps for SCM_PROVIDER.
var (
	SCM_PROVIDER_name = map[int32]string{
		0: "GITLAB",
		1: "GITHUB",
		2: "CODING",
	}
	SCM_PROVIDER_value = map[string]int32{
		"GITLAB": 0,
		"GITHUB": 1,
		"CODING": 2,
	}
)

func (x SCM_PROVIDER) Enum() *SCM_PROVIDER {
	p := new(SCM_PROVIDER)
	*p = x
	return p
}

func (x SCM_PROVIDER) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SCM_PROVIDER) Descriptor() protoreflect.EnumDescriptor {
	return file_mcenter_apps_service_pb_service_proto_enumTypes[1].Descriptor()
}

func (SCM_PROVIDER) Type() protoreflect.EnumType {
	return &file_mcenter_apps_service_pb_service_proto_enumTypes[1]
}

func (x SCM_PROVIDER) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SCM_PROVIDER.Descriptor instead.
func (SCM_PROVIDER) EnumDescriptor() ([]byte, []int) {
	return file_mcenter_apps_service_pb_service_proto_rawDescGZIP(), []int{1}
}

type LANGUAGE int32

const (
	LANGUAGE_JAVA        LANGUAGE = 0
	LANGUAGE_JAVASCRIPT  LANGUAGE = 1
	LANGUAGE_GOLANG      LANGUAGE = 2
	LANGUAGE_GO          LANGUAGE = 3
	LANGUAGE_PYTHON      LANGUAGE = 4
	LANGUAGE_PHP         LANGUAGE = 5
	LANGUAGE_C_SHARP     LANGUAGE = 6
	LANGUAGE_C           LANGUAGE = 7
	LANGUAGE_C_PLUS_PLUS LANGUAGE = 8
	LANGUAGE_SWIFT       LANGUAGE = 9
	LANGUAGE_OBJECT_C    LANGUAGE = 10
	LANGUAGE_RUST        LANGUAGE = 11
	LANGUAGE_RUBY        LANGUAGE = 12
	LANGUAGE_DART        LANGUAGE = 13
	LANGUAGE_KOTLIN      LANGUAGE = 14
	LANGUAGE_SHELL       LANGUAGE = 15
	LANGUAGE_POWER_SHELL LANGUAGE = 16
)

// Enum value maps for LANGUAGE.
var (
	LANGUAGE_name = map[int32]string{
		0:  "JAVA",
		1:  "JAVASCRIPT",
		2:  "GOLANG",
		3:  "GO",
		4:  "PYTHON",
		5:  "PHP",
		6:  "C_SHARP",
		7:  "C",
		8:  "C_PLUS_PLUS",
		9:  "SWIFT",
		10: "OBJECT_C",
		11: "RUST",
		12: "RUBY",
		13: "DART",
		14: "KOTLIN",
		15: "SHELL",
		16: "POWER_SHELL",
	}
	LANGUAGE_value = map[string]int32{
		"JAVA":        0,
		"JAVASCRIPT":  1,
		"GOLANG":      2,
		"GO":          3,
		"PYTHON":      4,
		"PHP":         5,
		"C_SHARP":     6,
		"C":           7,
		"C_PLUS_PLUS": 8,
		"SWIFT":       9,
		"OBJECT_C":    10,
		"RUST":        11,
		"RUBY":        12,
		"DART":        13,
		"KOTLIN":      14,
		"SHELL":       15,
		"POWER_SHELL": 16,
	}
)

func (x LANGUAGE) Enum() *LANGUAGE {
	p := new(LANGUAGE)
	*p = x
	return p
}

func (x LANGUAGE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LANGUAGE) Descriptor() protoreflect.EnumDescriptor {
	return file_mcenter_apps_service_pb_service_proto_enumTypes[2].Descriptor()
}

func (LANGUAGE) Type() protoreflect.EnumType {
	return &file_mcenter_apps_service_pb_service_proto_enumTypes[2]
}

func (x LANGUAGE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LANGUAGE.Descriptor instead.
func (LANGUAGE) EnumDescriptor() ([]byte, []int) {
	return file_mcenter_apps_service_pb_service_proto_rawDescGZIP(), []int{2}
}

// Service is service provider
type Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 元信息
	// @gotags: bson:",inline" json:"meta"
	Meta *resource.Meta `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta" bson:",inline"`
	// 服务定义
	// @gotags: bson:",inline" json:"spec"
	Spec *CreateServiceRequest `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec" bson:",inline"`
	// 服务的凭证, 用于服务注册
	// @gotags: bson:"credential" json:"credential"
	Credential *Credential `protobuf:"bytes,3,opt,name=credential,proto3" json:"credential" bson:"credential"`
	// 服务安全所需配置
	// @gotags: bson:"security" json:"security"
	Security *Security `protobuf:"bytes,4,opt,name=security,proto3" json:"security" bson:"security"`
}

func (x *Service) Reset() {
	*x = Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mcenter_apps_service_pb_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service) ProtoMessage() {}

func (x *Service) ProtoReflect() protoreflect.Message {
	mi := &file_mcenter_apps_service_pb_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service.ProtoReflect.Descriptor instead.
func (*Service) Descriptor() ([]byte, []int) {
	return file_mcenter_apps_service_pb_service_proto_rawDescGZIP(), []int{0}
}

func (x *Service) GetMeta() *resource.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Service) GetSpec() *CreateServiceRequest {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Service) GetCredential() *Credential {
	if x != nil {
		return x.Credential
	}
	return nil
}

func (x *Service) GetSecurity() *Security {
	if x != nil {
		return x.Security
	}
	return nil
}

type CreateServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 服务所属域
	// @gotags: bson:"domain" json:"domain"
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain" bson:"domain"`
	// 服务所属空间
	// @gotags: bson:"namespace" json:"namespace"
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace" bson:"namespace"`
	// 应用所有者
	// @gotags: bson:"owner" json:"owner"
	Owner string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner" bson:"owner"`
	// 是否启用该服务, 服务如果被停用，将不会被发现
	// @gotags: bson:"enabled" json:"enabled"
	Enabled bool `protobuf:"varint,4,opt,name=enabled,proto3" json:"enabled" bson:"enabled"`
	// 服务类型
	// @gotags: bson:"type" json:"type"
	Type Type `protobuf:"varint,5,opt,name=type,proto3,enum=infraboard.mcenter.service.Type" json:"type" bson:"type"`
	// 服务名称
	// @gotags: bson:"name" json:"name"
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name" bson:"name"`
	// 服务Logo
	// @gotags: bson:"logo" json:"logo"
	Logo string `protobuf:"bytes,10,opt,name=logo,proto3" json:"logo" bson:"logo"`
	// 服务描述信息
	// @gotags: bson:"description" json:"description"
	Description string `protobuf:"bytes,7,opt,name=description,proto3" json:"description" bson:"description"`
	// 服务等级, 默认0
	// @gotags: bson:"level" json:"level"
	Level uint32 `protobuf:"varint,8,opt,name=level,proto3" json:"level" bson:"level"`
	// 创建时间
	// @gotags: bson:"-" json:"create_timestamp,omitempty"
	CreateTimestamp int64 `protobuf:"varint,12,opt,name=create_timestamp,json=createTimestamp,proto3" json:"create_timestamp,omitempty" bson:"-"`
	// 代码仓库信息
	// @gotags: bson:"code_repository" json:"code_repository"
	CodeRepository *CodeRepository `protobuf:"bytes,9,opt,name=code_repository,json=codeRepository,proto3" json:"code_repository" bson:"code_repository"`
	// 镜像仓库信息
	// @gotags: bson:"image_repository" json:"image_repository"
	ImageRepository *ImageRepository `protobuf:"bytes,11,opt,name=image_repository,json=imageRepository,proto3" json:"image_repository" bson:"image_repository"`
	// 服务标签
	// @gotags: bson:"labels" json:"labels"
	Labels map[string]string `protobuf:"bytes,14,rep,name=labels,proto3" json:"labels" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"labels"`
}

func (x *CreateServiceRequest) Reset() {
	*x = CreateServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mcenter_apps_service_pb_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateServiceRequest) ProtoMessage() {}

func (x *CreateServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mcenter_apps_service_pb_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateServiceRequest.ProtoReflect.Descriptor instead.
func (*CreateServiceRequest) Descriptor() ([]byte, []int) {
	return file_mcenter_apps_service_pb_service_proto_rawDescGZIP(), []int{1}
}

func (x *CreateServiceRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *CreateServiceRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CreateServiceRequest) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *CreateServiceRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *CreateServiceRequest) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_SOURCE_CODE
}

func (x *CreateServiceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateServiceRequest) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *CreateServiceRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateServiceRequest) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *CreateServiceRequest) GetCreateTimestamp() int64 {
	if x != nil {
		return x.CreateTimestamp
	}
	return 0
}

func (x *CreateServiceRequest) GetCodeRepository() *CodeRepository {
	if x != nil {
		return x.CodeRepository
	}
	return nil
}

func (x *CreateServiceRequest) GetImageRepository() *ImageRepository {
	if x != nil {
		return x.ImageRepository
	}
	return nil
}

func (x *CreateServiceRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type UpdateServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// book id
	// @gotags: json:"id"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	// 更新模式
	// @gotags: json:"update_mode"
	UpdateMode request.UpdateMode `protobuf:"varint,2,opt,name=update_mode,json=updateMode,proto3,enum=infraboard.mcube.request.UpdateMode" json:"update_mode"`
	// 更新人
	// @gotags: json:"update_by"
	UpdateBy string `protobuf:"bytes,3,opt,name=update_by,json=updateBy,proto3" json:"update_by"`
	// 更新时间
	// @gotags: json:"update_at"
	UpdateAt int64 `protobuf:"varint,4,opt,name=update_at,json=updateAt,proto3" json:"update_at"`
	// 更新的书本信息
	// @gotags: json:"spec"
	Spec *CreateServiceRequest `protobuf:"bytes,5,opt,name=spec,proto3" json:"spec"`
}

func (x *UpdateServiceRequest) Reset() {
	*x = UpdateServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mcenter_apps_service_pb_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServiceRequest) ProtoMessage() {}

func (x *UpdateServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mcenter_apps_service_pb_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServiceRequest.ProtoReflect.Descriptor instead.
func (*UpdateServiceRequest) Descriptor() ([]byte, []int) {
	return file_mcenter_apps_service_pb_service_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateServiceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateServiceRequest) GetUpdateMode() request.UpdateMode {
	if x != nil {
		return x.UpdateMode
	}
	return request.UpdateMode(0)
}

func (x *UpdateServiceRequest) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

func (x *UpdateServiceRequest) GetUpdateAt() int64 {
	if x != nil {
		return x.UpdateAt
	}
	return 0
}

func (x *UpdateServiceRequest) GetSpec() *CreateServiceRequest {
	if x != nil {
		return x.Spec
	}
	return nil
}

type Credential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 是否启动客户端
	// @gotags: bson:"enabled" json:"enabled"
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled" bson:"enabled"`
	// 凭证更新时间
	// @gotags: bson:"update_at" json:"update_at"
	UpdateAt int64 `protobuf:"varint,2,opt,name=update_at,json=updateAt,proto3" json:"update_at" bson:"update_at"`
	// 服务客户端ID
	// @gotags: bson:"client_id" json:"client_id"
	ClientId string `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id" bson:"client_id"`
	// 服务客户端凭证
	// @gotags: bson:"client_secret" json:"client_secret"
	ClientSecret string `protobuf:"bytes,4,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret" bson:"client_secret"`
}

func (x *Credential) Reset() {
	*x = Credential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mcenter_apps_service_pb_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Credential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credential) ProtoMessage() {}

func (x *Credential) ProtoReflect() protoreflect.Message {
	mi := &file_mcenter_apps_service_pb_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credential.ProtoReflect.Descriptor instead.
func (*Credential) Descriptor() ([]byte, []int) {
	return file_mcenter_apps_service_pb_service_proto_rawDescGZIP(), []int{3}
}

func (x *Credential) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Credential) GetUpdateAt() int64 {
	if x != nil {
		return x.UpdateAt
	}
	return 0
}

func (x *Credential) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *Credential) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

// 服务代码仓库信息
type CodeRepository struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 仓库提供商
	// @gotags: bson:"provider" json:"provider"
	Provider SCM_PROVIDER `protobuf:"varint,1,opt,name=provider,proto3,enum=infraboard.mcenter.service.SCM_PROVIDER" json:"provider" bson:"provider"`
	// token 操作仓库, 比如设置回调
	// @gotags: bson:"token" json:"token,omitempty"
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty" bson:"token"`
	// 仓库对应的项目Id
	// @gotags: bson:"project_id" json:"project_id"
	ProjectId string `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3" json:"project_id" bson:"project_id"`
	// 仓库对应空间
	// @gotags: bson:"namespace" json:"namespace"
	Namespace string `protobuf:"bytes,9,opt,name=namespace,proto3" json:"namespace" bson:"namespace"`
	// 仓库web url地址
	// @gotags: bson:"web_url" json:"web_url"
	WebUrl string `protobuf:"bytes,10,opt,name=web_url,json=webUrl,proto3" json:"web_url" bson:"web_url"`
	// 仓库ssh url地址
	// @gotags: bson:"ssh_url" json:"ssh_url"
	SshUrl string `protobuf:"bytes,4,opt,name=ssh_url,json=sshUrl,proto3" json:"ssh_url" bson:"ssh_url"`
	// 仓库http url地址
	// @gotags: bson:"http_url" json:"http_url"
	HttpUrl string `protobuf:"bytes,5,opt,name=http_url,json=httpUrl,proto3" json:"http_url" bson:"http_url"`
	// 源代码使用的编程语言, 构建时, 不同语言有不同的构建环境
	// @gotags: bson:"language" json:"language"
	Language *LANGUAGE `protobuf:"varint,6,opt,name=language,proto3,enum=infraboard.mcenter.service.LANGUAGE,oneof" json:"language" bson:"language"`
	// 开启Hook设置
	// @gotags: bson:"enable_hook" json:"enable_hook"
	EnableHook bool `protobuf:"varint,7,opt,name=enable_hook,json=enableHook,proto3" json:"enable_hook" bson:"enable_hook"`
	// Hook设置
	// @gotags: bson:"hook_config" json:"hook_config"
	HookConfig string `protobuf:"bytes,8,opt,name=hook_config,json=hookConfig,proto3" json:"hook_config" bson:"hook_config"`
	// scm设置Hook后返回的id, 用于删除应用时，取消hook使用
	// @gotags: bson:"hook_id" json:"hook_id"
	HookId string `protobuf:"bytes,11,opt,name=hook_id,json=hookId,proto3" json:"hook_id" bson:"hook_id"`
	// 仓库的创建时间
	// @gotags: bson:"created_at" json:"created_at"
	CreatedAt int64 `protobuf:"varint,12,opt,name=created_at,json=createdAt,proto3" json:"created_at" bson:"created_at"`
}

func (x *CodeRepository) Reset() {
	*x = CodeRepository{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mcenter_apps_service_pb_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeRepository) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeRepository) ProtoMessage() {}

func (x *CodeRepository) ProtoReflect() protoreflect.Message {
	mi := &file_mcenter_apps_service_pb_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeRepository.ProtoReflect.Descriptor instead.
func (*CodeRepository) Descriptor() ([]byte, []int) {
	return file_mcenter_apps_service_pb_service_proto_rawDescGZIP(), []int{4}
}

func (x *CodeRepository) GetProvider() SCM_PROVIDER {
	if x != nil {
		return x.Provider
	}
	return SCM_PROVIDER_GITLAB
}

func (x *CodeRepository) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *CodeRepository) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *CodeRepository) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CodeRepository) GetWebUrl() string {
	if x != nil {
		return x.WebUrl
	}
	return ""
}

func (x *CodeRepository) GetSshUrl() string {
	if x != nil {
		return x.SshUrl
	}
	return ""
}

func (x *CodeRepository) GetHttpUrl() string {
	if x != nil {
		return x.HttpUrl
	}
	return ""
}

func (x *CodeRepository) GetLanguage() LANGUAGE {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return LANGUAGE_JAVA
}

func (x *CodeRepository) GetEnableHook() bool {
	if x != nil {
		return x.EnableHook
	}
	return false
}

func (x *CodeRepository) GetHookConfig() string {
	if x != nil {
		return x.HookConfig
	}
	return ""
}

func (x *CodeRepository) GetHookId() string {
	if x != nil {
		return x.HookId
	}
	return ""
}

func (x *CodeRepository) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

// 镜像仓库
type ImageRepository struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 服务镜像地址
	// @gotags: bson:"address" json:"address"
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address" bson:"address"`
	// 镜像版本
	// @gotags: bson:"version" json:"version"
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version" bson:"version"`
}

func (x *ImageRepository) Reset() {
	*x = ImageRepository{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mcenter_apps_service_pb_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageRepository) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageRepository) ProtoMessage() {}

func (x *ImageRepository) ProtoReflect() protoreflect.Message {
	mi := &file_mcenter_apps_service_pb_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageRepository.ProtoReflect.Descriptor instead.
func (*ImageRepository) Descriptor() ([]byte, []int) {
	return file_mcenter_apps_service_pb_service_proto_rawDescGZIP(), []int{5}
}

func (x *ImageRepository) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ImageRepository) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// 服务安全相关信息
type Security struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用于加密应用的铭感信息的key
	// @gotags: bson:"encrypt_key" json:"encrypt_key"
	EncryptKey string `protobuf:"bytes,1,opt,name=encrypt_key,json=encryptKey,proto3" json:"encrypt_key" bson:"encrypt_key"`
}

func (x *Security) Reset() {
	*x = Security{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mcenter_apps_service_pb_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Security) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Security) ProtoMessage() {}

func (x *Security) ProtoReflect() protoreflect.Message {
	mi := &file_mcenter_apps_service_pb_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Security.ProtoReflect.Descriptor instead.
func (*Security) Descriptor() ([]byte, []int) {
	return file_mcenter_apps_service_pb_service_proto_rawDescGZIP(), []int{6}
}

func (x *Security) GetEncryptKey() string {
	if x != nil {
		return x.EncryptKey
	}
	return ""
}

type ServiceSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: bson:"total" json:"total"
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total" bson:"total"`
	// @gotags: bson:"items" json:"items"
	Items []*Service `protobuf:"bytes,2,rep,name=items,proto3" json:"items" bson:"items"`
}

func (x *ServiceSet) Reset() {
	*x = ServiceSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mcenter_apps_service_pb_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceSet) ProtoMessage() {}

func (x *ServiceSet) ProtoReflect() protoreflect.Message {
	mi := &file_mcenter_apps_service_pb_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceSet.ProtoReflect.Descriptor instead.
func (*ServiceSet) Descriptor() ([]byte, []int) {
	return file_mcenter_apps_service_pb_service_proto_rawDescGZIP(), []int{7}
}

func (x *ServiceSet) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ServiceSet) GetItems() []*Service {
	if x != nil {
		return x.Items
	}
	return nil
}

var File_mcenter_apps_service_pb_service_proto protoreflect.FileDescriptor

var file_mcenter_apps_service_pb_service_proto_rawDesc = []byte{
	0x0a, 0x25, 0x6d, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x62, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x6d, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x1a, 0x1c, 0x6d, 0x63, 0x75, 0x62, 0x65, 0x2f, 0x70, 0x62, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x6d, 0x63, 0x75, 0x62, 0x65, 0x2f, 0x70, 0x62, 0x2f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x8e, 0x02, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x33, 0x0a,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x63, 0x75, 0x62, 0x65, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x12, 0x44, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x46, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x63, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x12, 0x40, 0x0a, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x6d, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x22, 0xfb, 0x04, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x20, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x63, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x6f, 0x67, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x53, 0x0a, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0e, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x56, 0x0a, 0x10, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d,
	0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x54, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x63, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xed, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24,
	0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x63, 0x75, 0x62,
	0x65, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1b, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x44, 0x0a, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x22, 0x85, 0x01, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0xc4, 0x03, 0x0a, 0x0e, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x44, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x43, 0x4d, 0x5f, 0x50,
	0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x65, 0x62, 0x55, 0x72, 0x6c, 0x12, 0x17, 0x0a,
	0x07, 0x73, 0x73, 0x68, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x73, 0x68, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x74, 0x74, 0x70, 0x55, 0x72,
	0x6c, 0x12, 0x45, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x2e, 0x6d, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x6f, 0x6f,
	0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x68, 0x6f, 0x6f, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f,
	0x6f, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x6f,
	0x6b, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22,
	0x45, 0x0a, 0x0f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x2b, 0x0a, 0x08, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x4b, 0x65, 0x79, 0x22, 0x5d, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x39, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x6d, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x2a, 0x37, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x43,
	0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x0f, 0x2a, 0x32, 0x0a, 0x0c, 0x53,
	0x43, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x12, 0x0a, 0x0a, 0x06, 0x47,
	0x49, 0x54, 0x4c, 0x41, 0x42, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x49, 0x54, 0x48, 0x55,
	0x42, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x2a,
	0xd1, 0x01, 0x0a, 0x08, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x12, 0x08, 0x0a, 0x04,
	0x4a, 0x41, 0x56, 0x41, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4a, 0x41, 0x56, 0x41, 0x53, 0x43,
	0x52, 0x49, 0x50, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x4f, 0x4c, 0x41, 0x4e, 0x47,
	0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x4f, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x59,
	0x54, 0x48, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x48, 0x50, 0x10, 0x05, 0x12,
	0x0b, 0x0a, 0x07, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x50, 0x10, 0x06, 0x12, 0x05, 0x0a, 0x01,
	0x43, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x5f, 0x50, 0x4c, 0x55, 0x53, 0x5f, 0x50, 0x4c,
	0x55, 0x53, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x57, 0x49, 0x46, 0x54, 0x10, 0x09, 0x12,
	0x0c, 0x0a, 0x08, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x10, 0x0a, 0x12, 0x08, 0x0a,
	0x04, 0x52, 0x55, 0x53, 0x54, 0x10, 0x0b, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x55, 0x42, 0x59, 0x10,
	0x0c, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x41, 0x52, 0x54, 0x10, 0x0d, 0x12, 0x0a, 0x0a, 0x06, 0x4b,
	0x4f, 0x54, 0x4c, 0x49, 0x4e, 0x10, 0x0e, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x48, 0x45, 0x4c, 0x4c,
	0x10, 0x0f, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x53, 0x48, 0x45, 0x4c,
	0x4c, 0x10, 0x10, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x6d, 0x63, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mcenter_apps_service_pb_service_proto_rawDescOnce sync.Once
	file_mcenter_apps_service_pb_service_proto_rawDescData = file_mcenter_apps_service_pb_service_proto_rawDesc
)

func file_mcenter_apps_service_pb_service_proto_rawDescGZIP() []byte {
	file_mcenter_apps_service_pb_service_proto_rawDescOnce.Do(func() {
		file_mcenter_apps_service_pb_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_mcenter_apps_service_pb_service_proto_rawDescData)
	})
	return file_mcenter_apps_service_pb_service_proto_rawDescData
}

var file_mcenter_apps_service_pb_service_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_mcenter_apps_service_pb_service_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_mcenter_apps_service_pb_service_proto_goTypes = []interface{}{
	(Type)(0),                    // 0: infraboard.mcenter.service.Type
	(SCM_PROVIDER)(0),            // 1: infraboard.mcenter.service.SCM_PROVIDER
	(LANGUAGE)(0),                // 2: infraboard.mcenter.service.LANGUAGE
	(*Service)(nil),              // 3: infraboard.mcenter.service.Service
	(*CreateServiceRequest)(nil), // 4: infraboard.mcenter.service.CreateServiceRequest
	(*UpdateServiceRequest)(nil), // 5: infraboard.mcenter.service.UpdateServiceRequest
	(*Credential)(nil),           // 6: infraboard.mcenter.service.Credential
	(*CodeRepository)(nil),       // 7: infraboard.mcenter.service.CodeRepository
	(*ImageRepository)(nil),      // 8: infraboard.mcenter.service.ImageRepository
	(*Security)(nil),             // 9: infraboard.mcenter.service.Security
	(*ServiceSet)(nil),           // 10: infraboard.mcenter.service.ServiceSet
	nil,                          // 11: infraboard.mcenter.service.CreateServiceRequest.LabelsEntry
	(*resource.Meta)(nil),        // 12: infraboard.mcube.resource.Meta
	(request.UpdateMode)(0),      // 13: infraboard.mcube.request.UpdateMode
}
var file_mcenter_apps_service_pb_service_proto_depIdxs = []int32{
	12, // 0: infraboard.mcenter.service.Service.meta:type_name -> infraboard.mcube.resource.Meta
	4,  // 1: infraboard.mcenter.service.Service.spec:type_name -> infraboard.mcenter.service.CreateServiceRequest
	6,  // 2: infraboard.mcenter.service.Service.credential:type_name -> infraboard.mcenter.service.Credential
	9,  // 3: infraboard.mcenter.service.Service.security:type_name -> infraboard.mcenter.service.Security
	0,  // 4: infraboard.mcenter.service.CreateServiceRequest.type:type_name -> infraboard.mcenter.service.Type
	7,  // 5: infraboard.mcenter.service.CreateServiceRequest.code_repository:type_name -> infraboard.mcenter.service.CodeRepository
	8,  // 6: infraboard.mcenter.service.CreateServiceRequest.image_repository:type_name -> infraboard.mcenter.service.ImageRepository
	11, // 7: infraboard.mcenter.service.CreateServiceRequest.labels:type_name -> infraboard.mcenter.service.CreateServiceRequest.LabelsEntry
	13, // 8: infraboard.mcenter.service.UpdateServiceRequest.update_mode:type_name -> infraboard.mcube.request.UpdateMode
	4,  // 9: infraboard.mcenter.service.UpdateServiceRequest.spec:type_name -> infraboard.mcenter.service.CreateServiceRequest
	1,  // 10: infraboard.mcenter.service.CodeRepository.provider:type_name -> infraboard.mcenter.service.SCM_PROVIDER
	2,  // 11: infraboard.mcenter.service.CodeRepository.language:type_name -> infraboard.mcenter.service.LANGUAGE
	3,  // 12: infraboard.mcenter.service.ServiceSet.items:type_name -> infraboard.mcenter.service.Service
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_mcenter_apps_service_pb_service_proto_init() }
func file_mcenter_apps_service_pb_service_proto_init() {
	if File_mcenter_apps_service_pb_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mcenter_apps_service_pb_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mcenter_apps_service_pb_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mcenter_apps_service_pb_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mcenter_apps_service_pb_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Credential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mcenter_apps_service_pb_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeRepository); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mcenter_apps_service_pb_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageRepository); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mcenter_apps_service_pb_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Security); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mcenter_apps_service_pb_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_mcenter_apps_service_pb_service_proto_msgTypes[4].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mcenter_apps_service_pb_service_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mcenter_apps_service_pb_service_proto_goTypes,
		DependencyIndexes: file_mcenter_apps_service_pb_service_proto_depIdxs,
		EnumInfos:         file_mcenter_apps_service_pb_service_proto_enumTypes,
		MessageInfos:      file_mcenter_apps_service_pb_service_proto_msgTypes,
	}.Build()
	File_mcenter_apps_service_pb_service_proto = out.File
	file_mcenter_apps_service_pb_service_proto_rawDesc = nil
	file_mcenter_apps_service_pb_service_proto_goTypes = nil
	file_mcenter_apps_service_pb_service_proto_depIdxs = nil
}
