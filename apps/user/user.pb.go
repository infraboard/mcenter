// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.26.0
// source: mcenter/apps/user/pb/user.proto

package user

import (
	resource "github.com/infraboard/mcube/v2/pb/resource"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PROVIDER int32

const (
	// 本地数据库
	PROVIDER_LOCAL PROVIDER = 0
	// 来源LDAP
	PROVIDER_LDAP PROVIDER = 1
	// 来源飞书
	PROVIDER_FEISHU PROVIDER = 2
	// 来源钉钉
	PROVIDER_DINGDING PROVIDER = 3
	// 来源企业微信
	PROVIDER_WECHAT_WORK PROVIDER = 4
)

// Enum value maps for PROVIDER.
var (
	PROVIDER_name = map[int32]string{
		0: "LOCAL",
		1: "LDAP",
		2: "FEISHU",
		3: "DINGDING",
		4: "WECHAT_WORK",
	}
	PROVIDER_value = map[string]int32{
		"LOCAL":       0,
		"LDAP":        1,
		"FEISHU":      2,
		"DINGDING":    3,
		"WECHAT_WORK": 4,
	}
)

func (x PROVIDER) Enum() *PROVIDER {
	p := new(PROVIDER)
	*p = x
	return p
}

func (x PROVIDER) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PROVIDER) Descriptor() protoreflect.EnumDescriptor {
	return file_mcenter_apps_user_pb_user_proto_enumTypes[0].Descriptor()
}

func (PROVIDER) Type() protoreflect.EnumType {
	return &file_mcenter_apps_user_pb_user_proto_enumTypes[0]
}

func (x PROVIDER) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PROVIDER.Descriptor instead.
func (PROVIDER) EnumDescriptor() ([]byte, []int) {
	return file_mcenter_apps_user_pb_user_proto_rawDescGZIP(), []int{0}
}

// 为了防止越权, 用户可以调整的权限范围只有10已下的权限
type TYPE int32

const (
	// 子账号, 无用户中心后台管理权限
	TYPE_SUB TYPE = 0
	// 主账号, 具有本域的所有权限
	TYPE_PRIMARY TYPE = 10
	// 超级管理员, 系统管理员, 万能的人, 不受权限系统约束
	TYPE_SUPPER TYPE = 15
)

// Enum value maps for TYPE.
var (
	TYPE_name = map[int32]string{
		0:  "SUB",
		10: "PRIMARY",
		15: "SUPPER",
	}
	TYPE_value = map[string]int32{
		"SUB":     0,
		"PRIMARY": 10,
		"SUPPER":  15,
	}
)

func (x TYPE) Enum() *TYPE {
	p := new(TYPE)
	*p = x
	return p
}

func (x TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_mcenter_apps_user_pb_user_proto_enumTypes[1].Descriptor()
}

func (TYPE) Type() protoreflect.EnumType {
	return &file_mcenter_apps_user_pb_user_proto_enumTypes[1]
}

func (x TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TYPE.Descriptor instead.
func (TYPE) EnumDescriptor() ([]byte, []int) {
	return file_mcenter_apps_user_pb_user_proto_rawDescGZIP(), []int{1}
}

type Gender int32

const (
	// 保密
	Gender_UNKNOWN Gender = 0
	// 男
	Gender_MALE Gender = 1
	// 女
	Gender_FEMALE Gender = 2
)

// Enum value maps for Gender.
var (
	Gender_name = map[int32]string{
		0: "UNKNOWN",
		1: "MALE",
		2: "FEMALE",
	}
	Gender_value = map[string]int32{
		"UNKNOWN": 0,
		"MALE":    1,
		"FEMALE":  2,
	}
)

func (x Gender) Enum() *Gender {
	p := new(Gender)
	*p = x
	return p
}

func (x Gender) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Gender) Descriptor() protoreflect.EnumDescriptor {
	return file_mcenter_apps_user_pb_user_proto_enumTypes[2].Descriptor()
}

func (Gender) Type() protoreflect.EnumType {
	return &file_mcenter_apps_user_pb_user_proto_enumTypes[2]
}

func (x Gender) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Gender.Descriptor instead.
func (Gender) EnumDescriptor() ([]byte, []int) {
	return file_mcenter_apps_user_pb_user_proto_rawDescGZIP(), []int{2}
}

type CREATE_FROM int32

const (
	// 管理员创建
	CREATE_FROM_PRIMARY_ACCOUNT CREATE_FROM = 0
	// 自己注册
	CREATE_FROM_SELF CREATE_FROM = 1
)

// Enum value maps for CREATE_FROM.
var (
	CREATE_FROM_name = map[int32]string{
		0: "PRIMARY_ACCOUNT",
		1: "SELF",
	}
	CREATE_FROM_value = map[string]int32{
		"PRIMARY_ACCOUNT": 0,
		"SELF":            1,
	}
)

func (x CREATE_FROM) Enum() *CREATE_FROM {
	p := new(CREATE_FROM)
	*p = x
	return p
}

func (x CREATE_FROM) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CREATE_FROM) Descriptor() protoreflect.EnumDescriptor {
	return file_mcenter_apps_user_pb_user_proto_enumTypes[3].Descriptor()
}

func (CREATE_FROM) Type() protoreflect.EnumType {
	return &file_mcenter_apps_user_pb_user_proto_enumTypes[3]
}

func (x CREATE_FROM) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CREATE_FROM.Descriptor instead.
func (CREATE_FROM) EnumDescriptor() ([]byte, []int) {
	return file_mcenter_apps_user_pb_user_proto_rawDescGZIP(), []int{3}
}

type DESCRIBE_BY int32

const (
	// 通过UserId查询用户
	DESCRIBE_BY_USER_ID DESCRIBE_BY = 0
	// 通过Username查询用户
	DESCRIBE_BY_USER_NAME DESCRIBE_BY = 1
	// 通过飞书UserId查询用户
	DESCRIBE_BY_FEISHU_USER_ID DESCRIBE_BY = 2
)

// Enum value maps for DESCRIBE_BY.
var (
	DESCRIBE_BY_name = map[int32]string{
		0: "USER_ID",
		1: "USER_NAME",
		2: "FEISHU_USER_ID",
	}
	DESCRIBE_BY_value = map[string]int32{
		"USER_ID":        0,
		"USER_NAME":      1,
		"FEISHU_USER_ID": 2,
	}
)

func (x DESCRIBE_BY) Enum() *DESCRIBE_BY {
	p := new(DESCRIBE_BY)
	*p = x
	return p
}

func (x DESCRIBE_BY) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DESCRIBE_BY) Descriptor() protoreflect.EnumDescriptor {
	return file_mcenter_apps_user_pb_user_proto_enumTypes[4].Descriptor()
}

func (DESCRIBE_BY) Type() protoreflect.EnumType {
	return &file_mcenter_apps_user_pb_user_proto_enumTypes[4]
}

func (x DESCRIBE_BY) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DESCRIBE_BY.Descriptor instead.
func (DESCRIBE_BY) EnumDescriptor() ([]byte, []int) {
	return file_mcenter_apps_user_pb_user_proto_rawDescGZIP(), []int{4}
}

type Password struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// hash过后的密码
	// @gotags: bson:"password" json:"password,omitempty"
	Password string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty" bson:"password"`
	// 密码创建时间
	// @gotags: bson:"create_at" json:"create_at"
	CreateAt int64 `protobuf:"varint,2,opt,name=create_at,json=createAt,proto3" json:"create_at" bson:"create_at"`
	// 密码更新时间
	// @gotags: bson:"update_at" json:"update_at"
	UpdateAt int64 `protobuf:"varint,3,opt,name=update_at,json=updateAt,proto3" json:"update_at" bson:"update_at"`
	// 密码需要被重置
	// @gotags: bson:"need_reset" json:"need_reset"
	NeedReset bool `protobuf:"varint,4,opt,name=need_reset,json=needReset,proto3" json:"need_reset" bson:"need_reset"`
	// 需要重置的原因
	// @gotags: bson:"reset_reason" json:"reset_reason"
	ResetReason string `protobuf:"bytes,5,opt,name=reset_reason,json=resetReason,proto3" json:"reset_reason" bson:"reset_reason"`
	// 密码过期时间, 密码过期后要求用户重置密码
	// @gotags: bson:"expired_days" json:"expired_days"
	ExpiredDays uint32 `protobuf:"varint,6,opt,name=expired_days,json=expiredDays,proto3" json:"expired_days" bson:"expired_days"`
	// 密码过期前多少天开始提醒
	// @gotags: bson:"expired_remind" json:"expired_remind"
	ExpiredRemind uint32 `protobuf:"varint,7,opt,name=expired_remind,json=expiredRemind,proto3" json:"expired_remind" bson:"expired_remind"`
	// 历史密码
	// @gotags: bson:"history" json:"history,omitempty"
	History []string `protobuf:"bytes,8,rep,name=history,proto3" json:"history,omitempty" bson:"history"`
}

func (x *Password) Reset() {
	*x = Password{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mcenter_apps_user_pb_user_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Password) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Password) ProtoMessage() {}

func (x *Password) ProtoReflect() protoreflect.Message {
	mi := &file_mcenter_apps_user_pb_user_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Password.ProtoReflect.Descriptor instead.
func (*Password) Descriptor() ([]byte, []int) {
	return file_mcenter_apps_user_pb_user_proto_rawDescGZIP(), []int{0}
}

func (x *Password) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Password) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *Password) GetUpdateAt() int64 {
	if x != nil {
		return x.UpdateAt
	}
	return 0
}

func (x *Password) GetNeedReset() bool {
	if x != nil {
		return x.NeedReset
	}
	return false
}

func (x *Password) GetResetReason() string {
	if x != nil {
		return x.ResetReason
	}
	return ""
}

func (x *Password) GetExpiredDays() uint32 {
	if x != nil {
		return x.ExpiredDays
	}
	return 0
}

func (x *Password) GetExpiredRemind() uint32 {
	if x != nil {
		return x.ExpiredRemind
	}
	return 0
}

func (x *Password) GetHistory() []string {
	if x != nil {
		return x.History
	}
	return nil
}

// Status 用户状态
type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户是否初始化
	// @gotags: bson:"is_initialized" json:"is_initialized"
	IsInitialized bool `protobuf:"varint,5,opt,name=is_initialized,json=isInitialized,proto3" json:"is_initialized" bson:"is_initialized"`
	// 是否冻结
	// @gotags: bson:"locked" json:"locked"
	Locked bool `protobuf:"varint,1,opt,name=locked,proto3" json:"locked" bson:"locked"`
	// 冻结时间
	// @gotags: bson:"locked_time" json:"locked_time"
	LockedTime int64 `protobuf:"varint,2,opt,name=locked_time,json=lockedTime,proto3" json:"locked_time" bson:"locked_time"`
	// 冻结原因
	// @gotags: bson:"locked_reson" json:"locked_reson"
	LockedReson string `protobuf:"bytes,3,opt,name=locked_reson,json=lockedReson,proto3" json:"locked_reson" bson:"locked_reson"`
	// 解冻时间
	// @gotags: bson:"unlock_time" json:"unlock_time"
	UnlockTime int64 `protobuf:"varint,4,opt,name=unlock_time,json=unlockTime,proto3" json:"unlock_time" bson:"unlock_time"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mcenter_apps_user_pb_user_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_mcenter_apps_user_pb_user_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_mcenter_apps_user_pb_user_proto_rawDescGZIP(), []int{1}
}

func (x *Status) GetIsInitialized() bool {
	if x != nil {
		return x.IsInitialized
	}
	return false
}

func (x *Status) GetLocked() bool {
	if x != nil {
		return x.Locked
	}
	return false
}

func (x *Status) GetLockedTime() int64 {
	if x != nil {
		return x.LockedTime
	}
	return 0
}

func (x *Status) GetLockedReson() string {
	if x != nil {
		return x.LockedReson
	}
	return ""
}

func (x *Status) GetUnlockTime() int64 {
	if x != nil {
		return x.UnlockTime
	}
	return 0
}

// User 用户账号
type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 元信息
	// @gotags: bson:",inline" json:"meta"
	Meta *resource.Meta `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta" bson:",inline"`
	// 定义信息
	// @gotags: bson:",inline" json:"spec"
	Spec *CreateUserRequest `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec" bson:",inline"`
	// 密码相关信息
	// @gotags: bson:"password" json:"password"
	Password *Password `protobuf:"bytes,4,opt,name=password,proto3" json:"password" bson:"password"`
	// 用户状态
	// @gotags: bson:"status" json:"status"
	Status *Status `protobuf:"bytes,5,opt,name=status,proto3" json:"status" bson:"status"`
	// 飞书token
	// @gotags: bson:"feishu_token" json:"feishu_token"
	FeishuToken *FeishuAccessToken `protobuf:"bytes,6,opt,name=feishu_token,json=feishuToken,proto3" json:"feishu_token" bson:"feishu_token"`
	// 钉钉token
	// @gotags: bson:"dingding_token" json:"dingding_token"
	DingdingToken *DingDingAccessToken `protobuf:"bytes,7,opt,name=dingding_token,json=dingdingToken,proto3" json:"dingding_token" bson:"dingding_token"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mcenter_apps_user_pb_user_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_mcenter_apps_user_pb_user_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_mcenter_apps_user_pb_user_proto_rawDescGZIP(), []int{2}
}

func (x *User) GetMeta() *resource.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *User) GetSpec() *CreateUserRequest {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *User) GetPassword() *Password {
	if x != nil {
		return x.Password
	}
	return nil
}

func (x *User) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *User) GetFeishuToken() *FeishuAccessToken {
	if x != nil {
		return x.FeishuToken
	}
	return nil
}

func (x *User) GetDingdingToken() *DingDingAccessToken {
	if x != nil {
		return x.DingdingToken
	}
	return nil
}

// Profile todo
type Profile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户真实姓名
	// @gotags: bson:"real_name" json:"real_name" validate:"lte=10"
	RealName string `protobuf:"bytes,1,opt,name=real_name,json=realName,proto3" json:"real_name" bson:"real_name" validate:"lte=10"`
	// 用户昵称, 用于在界面进行展示
	// @gotags: bson:"nick_name" json:"nick_name" validate:"lte=30"
	NickName string `protobuf:"bytes,2,opt,name=nick_name,json=nickName,proto3" json:"nick_name" bson:"nick_name" validate:"lte=30"`
	// 手机号码, 用户可以通过手机进行注册和密码找回, 还可以通过手机号进行登录
	// @gotags: bson:"phone" json:"phone" validate:"lte=30"
	Phone string `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone" bson:"phone" validate:"lte=30"`
	// 邮箱, 用户可以通过邮箱进行注册和照明密码
	// @gotags: bson:"email" json:"email" validate:"lte=30"
	Email string `protobuf:"bytes,4,opt,name=email,proto3" json:"email" bson:"email" validate:"lte=30"`
	// 用户住址
	// @gotags: bson:"address" json:"address" validate:"lte=120"
	Address string `protobuf:"bytes,5,opt,name=address,proto3" json:"address" bson:"address" validate:"lte=120"`
	// 性别
	// @gotags: bson:"gender" json:"gender" validate:"lte=10"
	Gender Gender `protobuf:"varint,6,opt,name=gender,proto3,enum=infraboard.mcenter.user.Gender" json:"gender" bson:"gender" validate:"lte=10"`
	// 头像
	// @gotags: bson:"avatar" json:"avatar" validate:"lte=300"
	Avatar string `protobuf:"bytes,7,opt,name=avatar,proto3" json:"avatar" bson:"avatar" validate:"lte=300"`
	// 用户使用的语言
	// @gotags: bson:"language" json:"language" validate:"lte=40"
	Language string `protobuf:"bytes,8,opt,name=language,proto3" json:"language" bson:"language" validate:"lte=40"`
	// 用户所在的城市
	// @gotags: bson:"city" json:"city" validate:"lte=40"
	City string `protobuf:"bytes,9,opt,name=city,proto3" json:"city" bson:"city" validate:"lte=40"`
	// 用户所在的省
	// @gotags: bson:"province" json:"province" validate:"lte=40"
	Province string `protobuf:"bytes,10,opt,name=province,proto3" json:"province" bson:"province" validate:"lte=40"`
}

func (x *Profile) Reset() {
	*x = Profile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mcenter_apps_user_pb_user_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Profile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Profile) ProtoMessage() {}

func (x *Profile) ProtoReflect() protoreflect.Message {
	mi := &file_mcenter_apps_user_pb_user_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Profile.ProtoReflect.Descriptor instead.
func (*Profile) Descriptor() ([]byte, []int) {
	return file_mcenter_apps_user_pb_user_proto_rawDescGZIP(), []int{3}
}

func (x *Profile) GetRealName() string {
	if x != nil {
		return x.RealName
	}
	return ""
}

func (x *Profile) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *Profile) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *Profile) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Profile) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Profile) GetGender() Gender {
	if x != nil {
		return x.Gender
	}
	return Gender_UNKNOWN
}

func (x *Profile) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *Profile) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *Profile) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Profile) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

// CreateUserRequest 创建用户请求
type CreateUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 账号提供方
	// @gotags: json:"provider" bson:"provider"
	Provider PROVIDER `protobuf:"varint,1,opt,name=provider,proto3,enum=infraboard.mcenter.user.PROVIDER" json:"provider" bson:"provider"`
	// 用户类型
	// @gotags: json:"type" bson:"type"
	Type TYPE `protobuf:"varint,2,opt,name=type,proto3,enum=infraboard.mcenter.user.TYPE" json:"type" bson:"type"`
	// 创建来源
	// @gotags: json:"create_from" bson:"create_from"
	CreateFrom CREATE_FROM `protobuf:"varint,3,opt,name=create_from,json=createFrom,proto3,enum=infraboard.mcenter.user.CREATE_FROM" json:"create_from" bson:"create_from"`
	// 创建类型
	// @gotags: json:"create_by" bson:"create_by"
	CreateBy string `protobuf:"bytes,13,opt,name=create_by,json=createBy,proto3" json:"create_by" bson:"create_by"`
	// 域信息
	// @gotags: json:"domain" bson:"domain" validate:"required"
	Domain string `protobuf:"bytes,4,opt,name=domain,proto3" json:"domain" bson:"domain" validate:"required"`
	// 用户账号名称
	// @gotags: json:"username" bson:"username" validate:"required,lte=60"
	Username string `protobuf:"bytes,5,opt,name=username,proto3" json:"username" bson:"username" validate:"required,lte=60"`
	// 密码相关信息
	// @gotags: json:"password" bson:"-" validate:"required,lte=80"
	Password string `protobuf:"bytes,6,opt,name=password,proto3" json:"password" bson:"-" validate:"required,lte=80"`
	// 用户描述
	// @gotags: json:"description" bson:"description"
	Description string `protobuf:"bytes,7,opt,name=description,proto3" json:"description" bson:"description"`
	// 用户标签, 用于过滤用户
	// @gotags: json:"labels" bson:"labels"
	Labels map[string]string `protobuf:"bytes,11,rep,name=labels,proto3" json:"labels" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"labels"`
	// 用户飞书相关信息
	// @gotags: json:"feishu" bson:"feishu"
	Feishu *Feishu `protobuf:"bytes,8,opt,name=feishu,proto3" json:"feishu" bson:"feishu"`
	// 用户钉钉相关信息
	// @gotags: json:"dingding" bson:"dingding"
	Dingding *DingDing `protobuf:"bytes,9,opt,name=dingding,proto3" json:"dingding" bson:"dingding"`
	// 用户企业微信相关信息
	// @gotags: json:"wechatwork" bson:"wechatwork"
	Wechatwork *WechatWork `protobuf:"bytes,10,opt,name=wechatwork,proto3" json:"wechatwork" bson:"wechatwork"`
	// 使用全名作为uid, 比如 admin@default, 默认使用uuid
	// @gotags: json:"use_full_named_uid" bson:"use_full_named_uid"
	UseFullNamedUid bool `protobuf:"varint,12,opt,name=use_full_named_uid,json=useFullNamedUid,proto3" json:"use_full_named_uid" bson:"use_full_named_uid"`
	// Profile信息
	// @gotags bson:"profile" json:"profile"
	Profile *Profile `protobuf:"bytes,14,opt,name=profile,proto3" json:"profile,omitempty"`
}

func (x *CreateUserRequest) Reset() {
	*x = CreateUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mcenter_apps_user_pb_user_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserRequest) ProtoMessage() {}

func (x *CreateUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mcenter_apps_user_pb_user_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserRequest.ProtoReflect.Descriptor instead.
func (*CreateUserRequest) Descriptor() ([]byte, []int) {
	return file_mcenter_apps_user_pb_user_proto_rawDescGZIP(), []int{4}
}

func (x *CreateUserRequest) GetProvider() PROVIDER {
	if x != nil {
		return x.Provider
	}
	return PROVIDER_LOCAL
}

func (x *CreateUserRequest) GetType() TYPE {
	if x != nil {
		return x.Type
	}
	return TYPE_SUB
}

func (x *CreateUserRequest) GetCreateFrom() CREATE_FROM {
	if x != nil {
		return x.CreateFrom
	}
	return CREATE_FROM_PRIMARY_ACCOUNT
}

func (x *CreateUserRequest) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *CreateUserRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *CreateUserRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *CreateUserRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CreateUserRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateUserRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CreateUserRequest) GetFeishu() *Feishu {
	if x != nil {
		return x.Feishu
	}
	return nil
}

func (x *CreateUserRequest) GetDingding() *DingDing {
	if x != nil {
		return x.Dingding
	}
	return nil
}

func (x *CreateUserRequest) GetWechatwork() *WechatWork {
	if x != nil {
		return x.Wechatwork
	}
	return nil
}

func (x *CreateUserRequest) GetUseFullNamedUid() bool {
	if x != nil {
		return x.UseFullNamedUid
	}
	return false
}

func (x *CreateUserRequest) GetProfile() *Profile {
	if x != nil {
		return x.Profile
	}
	return nil
}

type Feishu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 是否启用飞书认证
	// @gotags: bson:"enabled" json:"enabled"
	Enabled bool `protobuf:"varint,4,opt,name=enabled,proto3" json:"enabled" bson:"enabled"`
	// 用户在飞书应用内的唯一标识
	// @gotags: bson:"open_id" json:"open_id"
	OpenId string `protobuf:"bytes,1,opt,name=open_id,json=openId,proto3" json:"open_id" bson:"open_id"`
	// 用户统一ID，在同一租户开发的所有应用内的唯一标识
	// @gotags: bson:"union_id" json:"union_id"
	UnionId string `protobuf:"bytes,2,opt,name=union_id,json=unionId,proto3" json:"union_id" bson:"union_id"`
	// 用户 user id，申请了邮箱获取权限(获取用户 user ID)的应用会返回该字段
	// @gotags: bson:"user_id" json:"user_id"
	UserId string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id" bson:"user_id"`
}

func (x *Feishu) Reset() {
	*x = Feishu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mcenter_apps_user_pb_user_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Feishu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Feishu) ProtoMessage() {}

func (x *Feishu) ProtoReflect() protoreflect.Message {
	mi := &file_mcenter_apps_user_pb_user_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Feishu.ProtoReflect.Descriptor instead.
func (*Feishu) Descriptor() ([]byte, []int) {
	return file_mcenter_apps_user_pb_user_proto_rawDescGZIP(), []int{5}
}

func (x *Feishu) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Feishu) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *Feishu) GetUnionId() string {
	if x != nil {
		return x.UnionId
	}
	return ""
}

func (x *Feishu) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type FeishuAccessToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 飞书服务器授权的access_token，用于调用其他接口
	// @gotags: bson:"access_token" json:"access_token"
	AccessToken string `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token" bson:"access_token"`
	// token OAuth 2.0协议规定的Token类型，固定为 Bearer
	// @gotags: bson:"token_type" json:"token_type"
	TokenType string `protobuf:"bytes,2,opt,name=token_type,json=tokenType,proto3" json:"token_type" bson:"token_type"`
	// access_token 颁发时间
	// @gotags: bson:"issue_at" json:"issue_at"
	IssueAt int64 `protobuf:"varint,3,opt,name=issue_at,json=issueAt,proto3" json:"issue_at" bson:"issue_at"`
	// access_token 的有效期，三方应用服务器需要根据此返回值来控制access_token的有效时间
	// @gotags: bson:"expires_in" json:"expires_in"
	ExpiresIn int64 `protobuf:"varint,4,opt,name=expires_in,json=expiresIn,proto3" json:"expires_in" bson:"expires_in"`
	// 当 access_token 过期时，通过 refresh_token来刷新，获取新的 access_token
	// @gotags: bson:"refresh_token" json:"refresh_token"
	RefreshToken string `protobuf:"bytes,5,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token" bson:"refresh_token"`
	// refresh_token 的有效期
	// @gotags: bson:"refresh_expires_in" json:"refresh_expires_in"
	RefreshExpiresIn int64 `protobuf:"varint,6,opt,name=refresh_expires_in,json=refreshExpiresIn,proto3" json:"refresh_expires_in" bson:"refresh_expires_in"`
}

func (x *FeishuAccessToken) Reset() {
	*x = FeishuAccessToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mcenter_apps_user_pb_user_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeishuAccessToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeishuAccessToken) ProtoMessage() {}

func (x *FeishuAccessToken) ProtoReflect() protoreflect.Message {
	mi := &file_mcenter_apps_user_pb_user_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeishuAccessToken.ProtoReflect.Descriptor instead.
func (*FeishuAccessToken) Descriptor() ([]byte, []int) {
	return file_mcenter_apps_user_pb_user_proto_rawDescGZIP(), []int{6}
}

func (x *FeishuAccessToken) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *FeishuAccessToken) GetTokenType() string {
	if x != nil {
		return x.TokenType
	}
	return ""
}

func (x *FeishuAccessToken) GetIssueAt() int64 {
	if x != nil {
		return x.IssueAt
	}
	return 0
}

func (x *FeishuAccessToken) GetExpiresIn() int64 {
	if x != nil {
		return x.ExpiresIn
	}
	return 0
}

func (x *FeishuAccessToken) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *FeishuAccessToken) GetRefreshExpiresIn() int64 {
	if x != nil {
		return x.RefreshExpiresIn
	}
	return 0
}

type DingDing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 是否启用钉钉认证
	// @gotags: bson:"enabled" json:"enabled"
	Enabled bool `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled" bson:"enabled"`
	// 用户在飞书应用内的唯一标识
	// @gotags: bson:"open_id" json:"open_id"
	OpenId string `protobuf:"bytes,1,opt,name=open_id,json=openId,proto3" json:"open_id" bson:"open_id"`
	// 用户统一ID，在同一租户开发的所有应用内的唯一标识
	// @gotags: bson:"union_id" json:"union_id"
	UnionId string `protobuf:"bytes,2,opt,name=union_id,json=unionId,proto3" json:"union_id" bson:"union_id"`
}

func (x *DingDing) Reset() {
	*x = DingDing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mcenter_apps_user_pb_user_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DingDing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DingDing) ProtoMessage() {}

func (x *DingDing) ProtoReflect() protoreflect.Message {
	mi := &file_mcenter_apps_user_pb_user_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DingDing.ProtoReflect.Descriptor instead.
func (*DingDing) Descriptor() ([]byte, []int) {
	return file_mcenter_apps_user_pb_user_proto_rawDescGZIP(), []int{7}
}

func (x *DingDing) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *DingDing) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *DingDing) GetUnionId() string {
	if x != nil {
		return x.UnionId
	}
	return ""
}

type DingDingAccessToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 生成的accessToken
	// @gotags: bson:"access_token" json:"accessToken"
	AccessToken string `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"accessToken" bson:"access_token"`
	// 生成的refresh_token。可以使用此刷新token，定期的获取用户的accessToken
	// @gotags: bson:"refresh_token" json:"refreshToken"
	RefreshToken string `protobuf:"bytes,2,opt,name=refresh_token,json=refreshToken,proto3" json:"refreshToken" bson:"refresh_token"`
	// 超时时间，单位秒。
	// @gotags: bson:"expires_in" json:"expireIn"
	ExpiresIn int64 `protobuf:"varint,3,opt,name=expires_in,json=expiresIn,proto3" json:"expireIn" bson:"expires_in"`
	// 所选企业corpId。
	// @gotags: bson:"expires_in" json:"corpId"
	CorpId string `protobuf:"bytes,4,opt,name=corp_id,json=corpId,proto3" json:"corpId" bson:"expires_in"`
	// access_token 颁发时间
	// @gotags: bson:"issue_at" json:"issue_at"
	IssueAt int64 `protobuf:"varint,5,opt,name=issue_at,json=issueAt,proto3" json:"issue_at" bson:"issue_at"`
}

func (x *DingDingAccessToken) Reset() {
	*x = DingDingAccessToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mcenter_apps_user_pb_user_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DingDingAccessToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DingDingAccessToken) ProtoMessage() {}

func (x *DingDingAccessToken) ProtoReflect() protoreflect.Message {
	mi := &file_mcenter_apps_user_pb_user_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DingDingAccessToken.ProtoReflect.Descriptor instead.
func (*DingDingAccessToken) Descriptor() ([]byte, []int) {
	return file_mcenter_apps_user_pb_user_proto_rawDescGZIP(), []int{8}
}

func (x *DingDingAccessToken) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *DingDingAccessToken) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *DingDingAccessToken) GetExpiresIn() int64 {
	if x != nil {
		return x.ExpiresIn
	}
	return 0
}

func (x *DingDingAccessToken) GetCorpId() string {
	if x != nil {
		return x.CorpId
	}
	return ""
}

func (x *DingDingAccessToken) GetIssueAt() int64 {
	if x != nil {
		return x.IssueAt
	}
	return 0
}

type WechatWork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 是否启用企业微信认证
	// @gotags: bson:"enabled" json:"enabled"
	Enabled bool `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled" bson:"enabled"`
	// 用户在企业微信中的Id
	// @gotags: bson:"user_id" json:"user_id"
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id" bson:"user_id"`
	// 用户在企业微信唯一标识
	// @gotags: bson:"open_id" json:"open_id"
	OpenId string `protobuf:"bytes,2,opt,name=open_id,json=openId,proto3" json:"open_id" bson:"open_id"`
}

func (x *WechatWork) Reset() {
	*x = WechatWork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mcenter_apps_user_pb_user_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WechatWork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WechatWork) ProtoMessage() {}

func (x *WechatWork) ProtoReflect() protoreflect.Message {
	mi := &file_mcenter_apps_user_pb_user_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WechatWork.ProtoReflect.Descriptor instead.
func (*WechatWork) Descriptor() ([]byte, []int) {
	return file_mcenter_apps_user_pb_user_proto_rawDescGZIP(), []int{9}
}

func (x *WechatWork) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *WechatWork) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *WechatWork) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

type UserSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 总数量
	// @gotags: bson:"total" json:"total"
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total" bson:"total"`
	// 数据项
	// @gotags: bson:"items" json:"items"
	Items []*User `protobuf:"bytes,2,rep,name=items,proto3" json:"items" bson:"items"`
}

func (x *UserSet) Reset() {
	*x = UserSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mcenter_apps_user_pb_user_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSet) ProtoMessage() {}

func (x *UserSet) ProtoReflect() protoreflect.Message {
	mi := &file_mcenter_apps_user_pb_user_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSet.ProtoReflect.Descriptor instead.
func (*UserSet) Descriptor() ([]byte, []int) {
	return file_mcenter_apps_user_pb_user_proto_rawDescGZIP(), []int{10}
}

func (x *UserSet) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *UserSet) GetItems() []*User {
	if x != nil {
		return x.Items
	}
	return nil
}

var File_mcenter_apps_user_pb_user_proto protoreflect.FileDescriptor

var file_mcenter_apps_user_pb_user_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x6d, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x2f, 0x70, 0x62, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x17, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x1a, 0x1c, 0x6d, 0x63, 0x75, 0x62,
	0x65, 0x2f, 0x70, 0x62, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x6d, 0x65,
	0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x86, 0x02, 0x0a, 0x08, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6e,
	0x65, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x6e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x21, 0x0a,
	0x0c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x44, 0x61, 0x79, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x6d, 0x69,
	0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x64, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x22, 0xac, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x69, 0x73, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x97, 0x03, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x63, 0x75, 0x62, 0x65, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3e,
	0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x63, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x3d,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x37, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4d, 0x0a, 0x0c, 0x66, 0x65, 0x69, 0x73, 0x68, 0x75,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x63, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x46, 0x65, 0x69, 0x73, 0x68, 0x75, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x0b, 0x66, 0x65, 0x69, 0x73, 0x68, 0x75,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x53, 0x0a, 0x0e, 0x64, 0x69, 0x6e, 0x67, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x6e, 0x67,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x0d, 0x64, 0x69, 0x6e,
	0x67, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xa6, 0x02, 0x0a, 0x07, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x37, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x6d, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x6e, 0x63, 0x65, 0x22, 0x8c, 0x06, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x6d, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x54, 0x59, 0x50, 0x45, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x72,
	0x6f, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x4e, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d,
	0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x37, 0x0a, 0x06, 0x66, 0x65, 0x69, 0x73, 0x68, 0x75, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d,
	0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x46, 0x65, 0x69, 0x73,
	0x68, 0x75, 0x52, 0x06, 0x66, 0x65, 0x69, 0x73, 0x68, 0x75, 0x12, 0x3d, 0x0a, 0x08, 0x64, 0x69,
	0x6e, 0x67, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x63, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x6e, 0x67, 0x52,
	0x08, 0x64, 0x69, 0x6e, 0x67, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x43, 0x0a, 0x0a, 0x77, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x52, 0x0a, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x2b,
	0x0a, 0x12, 0x75, 0x73, 0x65, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x64,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x46,
	0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x55, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x63, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x6f, 0x0a, 0x06, 0x46, 0x65, 0x69, 0x73, 0x68, 0x75, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0xe2, 0x01, 0x0a, 0x11, 0x46, 0x65, 0x69, 0x73, 0x68, 0x75, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x73, 0x5f, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x73, 0x49, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x22, 0x58, 0x0a, 0x08, 0x44, 0x69, 0x6e, 0x67,
	0x44, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0xb0, 0x01, 0x0a, 0x13, 0x44, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x6e, 0x67, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x49,
	0x6e, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6f, 0x72, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x72, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x41, 0x74, 0x22, 0x58, 0x0a, 0x0a, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x22,
	0x54, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x33, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x63, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x2a, 0x4a, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45,
	0x52, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x4c, 0x44, 0x41, 0x50, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x45, 0x49, 0x53, 0x48, 0x55,
	0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x4e, 0x47, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x03,
	0x12, 0x0f, 0x0a, 0x0b, 0x57, 0x45, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x10,
	0x04, 0x2a, 0x28, 0x0a, 0x04, 0x54, 0x59, 0x50, 0x45, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x55, 0x42,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x0a, 0x12,
	0x0a, 0x0a, 0x06, 0x53, 0x55, 0x50, 0x50, 0x45, 0x52, 0x10, 0x0f, 0x2a, 0x2b, 0x0a, 0x06, 0x47,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x46, 0x45, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x02, 0x2a, 0x2c, 0x0a, 0x0b, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52, 0x49, 0x4d, 0x41,
	0x52, 0x59, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x53, 0x45, 0x4c, 0x46, 0x10, 0x01, 0x2a, 0x3d, 0x0a, 0x0b, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49,
	0x42, 0x45, 0x5f, 0x42, 0x59, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10,
	0x01, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x45, 0x49, 0x53, 0x48, 0x55, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x49, 0x44, 0x10, 0x02, 0x42, 0x29, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x6d,
	0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mcenter_apps_user_pb_user_proto_rawDescOnce sync.Once
	file_mcenter_apps_user_pb_user_proto_rawDescData = file_mcenter_apps_user_pb_user_proto_rawDesc
)

func file_mcenter_apps_user_pb_user_proto_rawDescGZIP() []byte {
	file_mcenter_apps_user_pb_user_proto_rawDescOnce.Do(func() {
		file_mcenter_apps_user_pb_user_proto_rawDescData = protoimpl.X.CompressGZIP(file_mcenter_apps_user_pb_user_proto_rawDescData)
	})
	return file_mcenter_apps_user_pb_user_proto_rawDescData
}

var file_mcenter_apps_user_pb_user_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_mcenter_apps_user_pb_user_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_mcenter_apps_user_pb_user_proto_goTypes = []interface{}{
	(PROVIDER)(0),               // 0: infraboard.mcenter.user.PROVIDER
	(TYPE)(0),                   // 1: infraboard.mcenter.user.TYPE
	(Gender)(0),                 // 2: infraboard.mcenter.user.Gender
	(CREATE_FROM)(0),            // 3: infraboard.mcenter.user.CREATE_FROM
	(DESCRIBE_BY)(0),            // 4: infraboard.mcenter.user.DESCRIBE_BY
	(*Password)(nil),            // 5: infraboard.mcenter.user.Password
	(*Status)(nil),              // 6: infraboard.mcenter.user.Status
	(*User)(nil),                // 7: infraboard.mcenter.user.User
	(*Profile)(nil),             // 8: infraboard.mcenter.user.Profile
	(*CreateUserRequest)(nil),   // 9: infraboard.mcenter.user.CreateUserRequest
	(*Feishu)(nil),              // 10: infraboard.mcenter.user.Feishu
	(*FeishuAccessToken)(nil),   // 11: infraboard.mcenter.user.FeishuAccessToken
	(*DingDing)(nil),            // 12: infraboard.mcenter.user.DingDing
	(*DingDingAccessToken)(nil), // 13: infraboard.mcenter.user.DingDingAccessToken
	(*WechatWork)(nil),          // 14: infraboard.mcenter.user.WechatWork
	(*UserSet)(nil),             // 15: infraboard.mcenter.user.UserSet
	nil,                         // 16: infraboard.mcenter.user.CreateUserRequest.LabelsEntry
	(*resource.Meta)(nil),       // 17: infraboard.mcube.resource.Meta
}
var file_mcenter_apps_user_pb_user_proto_depIdxs = []int32{
	17, // 0: infraboard.mcenter.user.User.meta:type_name -> infraboard.mcube.resource.Meta
	9,  // 1: infraboard.mcenter.user.User.spec:type_name -> infraboard.mcenter.user.CreateUserRequest
	5,  // 2: infraboard.mcenter.user.User.password:type_name -> infraboard.mcenter.user.Password
	6,  // 3: infraboard.mcenter.user.User.status:type_name -> infraboard.mcenter.user.Status
	11, // 4: infraboard.mcenter.user.User.feishu_token:type_name -> infraboard.mcenter.user.FeishuAccessToken
	13, // 5: infraboard.mcenter.user.User.dingding_token:type_name -> infraboard.mcenter.user.DingDingAccessToken
	2,  // 6: infraboard.mcenter.user.Profile.gender:type_name -> infraboard.mcenter.user.Gender
	0,  // 7: infraboard.mcenter.user.CreateUserRequest.provider:type_name -> infraboard.mcenter.user.PROVIDER
	1,  // 8: infraboard.mcenter.user.CreateUserRequest.type:type_name -> infraboard.mcenter.user.TYPE
	3,  // 9: infraboard.mcenter.user.CreateUserRequest.create_from:type_name -> infraboard.mcenter.user.CREATE_FROM
	16, // 10: infraboard.mcenter.user.CreateUserRequest.labels:type_name -> infraboard.mcenter.user.CreateUserRequest.LabelsEntry
	10, // 11: infraboard.mcenter.user.CreateUserRequest.feishu:type_name -> infraboard.mcenter.user.Feishu
	12, // 12: infraboard.mcenter.user.CreateUserRequest.dingding:type_name -> infraboard.mcenter.user.DingDing
	14, // 13: infraboard.mcenter.user.CreateUserRequest.wechatwork:type_name -> infraboard.mcenter.user.WechatWork
	8,  // 14: infraboard.mcenter.user.CreateUserRequest.profile:type_name -> infraboard.mcenter.user.Profile
	7,  // 15: infraboard.mcenter.user.UserSet.items:type_name -> infraboard.mcenter.user.User
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_mcenter_apps_user_pb_user_proto_init() }
func file_mcenter_apps_user_pb_user_proto_init() {
	if File_mcenter_apps_user_pb_user_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mcenter_apps_user_pb_user_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Password); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mcenter_apps_user_pb_user_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mcenter_apps_user_pb_user_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mcenter_apps_user_pb_user_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Profile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mcenter_apps_user_pb_user_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mcenter_apps_user_pb_user_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Feishu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mcenter_apps_user_pb_user_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeishuAccessToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mcenter_apps_user_pb_user_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DingDing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mcenter_apps_user_pb_user_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DingDingAccessToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mcenter_apps_user_pb_user_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WechatWork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mcenter_apps_user_pb_user_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mcenter_apps_user_pb_user_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mcenter_apps_user_pb_user_proto_goTypes,
		DependencyIndexes: file_mcenter_apps_user_pb_user_proto_depIdxs,
		EnumInfos:         file_mcenter_apps_user_pb_user_proto_enumTypes,
		MessageInfos:      file_mcenter_apps_user_pb_user_proto_msgTypes,
	}.Build()
	File_mcenter_apps_user_pb_user_proto = out.File
	file_mcenter_apps_user_pb_user_proto_rawDesc = nil
	file_mcenter_apps_user_pb_user_proto_goTypes = nil
	file_mcenter_apps_user_pb_user_proto_depIdxs = nil
}
