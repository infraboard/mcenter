// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.26.0
// source: mcenter/apps/instance/pb/instance.proto

package instance

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 实例注册的协议类型
type PROTOCAL int32

const (
	// GRPC服务
	PROTOCAL_GRPC PROTOCAL = 0
	// HTTP服务
	PROTOCAL_HTTP PROTOCAL = 1
)

// Enum value maps for PROTOCAL.
var (
	PROTOCAL_name = map[int32]string{
		0: "GRPC",
		1: "HTTP",
	}
	PROTOCAL_value = map[string]int32{
		"GRPC": 0,
		"HTTP": 1,
	}
)

func (x PROTOCAL) Enum() *PROTOCAL {
	p := new(PROTOCAL)
	*p = x
	return p
}

func (x PROTOCAL) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PROTOCAL) Descriptor() protoreflect.EnumDescriptor {
	return file_mcenter_apps_instance_pb_instance_proto_enumTypes[0].Descriptor()
}

func (PROTOCAL) Type() protoreflect.EnumType {
	return &file_mcenter_apps_instance_pb_instance_proto_enumTypes[0]
}

func (x PROTOCAL) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PROTOCAL.Descriptor instead.
func (PROTOCAL) EnumDescriptor() ([]byte, []int) {
	return file_mcenter_apps_instance_pb_instance_proto_rawDescGZIP(), []int{0}
}

type PROVIDER int32

const (
	// SDK直接注册
	PROVIDER_SDK PROVIDER = 0
	// 服务来源于kubernetes, 由operator提供注册
	PROVIDER_KUBERNETES PROVIDER = 1
)

// Enum value maps for PROVIDER.
var (
	PROVIDER_name = map[int32]string{
		0: "SDK",
		1: "KUBERNETES",
	}
	PROVIDER_value = map[string]int32{
		"SDK":        0,
		"KUBERNETES": 1,
	}
)

func (x PROVIDER) Enum() *PROVIDER {
	p := new(PROVIDER)
	*p = x
	return p
}

func (x PROVIDER) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PROVIDER) Descriptor() protoreflect.EnumDescriptor {
	return file_mcenter_apps_instance_pb_instance_proto_enumTypes[1].Descriptor()
}

func (PROVIDER) Type() protoreflect.EnumType {
	return &file_mcenter_apps_instance_pb_instance_proto_enumTypes[1]
}

func (x PROVIDER) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PROVIDER.Descriptor instead.
func (PROVIDER) EnumDescriptor() ([]byte, []int) {
	return file_mcenter_apps_instance_pb_instance_proto_rawDescGZIP(), []int{1}
}

type STAGE int32

const (
	// 实例正常运行
	STAGE_ALIVE STAGE = 0
)

// Enum value maps for STAGE.
var (
	STAGE_name = map[int32]string{
		0: "ALIVE",
	}
	STAGE_value = map[string]int32{
		"ALIVE": 0,
	}
)

func (x STAGE) Enum() *STAGE {
	p := new(STAGE)
	*p = x
	return p
}

func (x STAGE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (STAGE) Descriptor() protoreflect.EnumDescriptor {
	return file_mcenter_apps_instance_pb_instance_proto_enumTypes[2].Descriptor()
}

func (STAGE) Type() protoreflect.EnumType {
	return &file_mcenter_apps_instance_pb_instance_proto_enumTypes[2]
}

func (x STAGE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use STAGE.Descriptor instead.
func (STAGE) EnumDescriptor() ([]byte, []int) {
	return file_mcenter_apps_instance_pb_instance_proto_rawDescGZIP(), []int{2}
}

type CommandType int32

const (
	CommandType_UPDATE_INSTANCE CommandType = 0
)

// Enum value maps for CommandType.
var (
	CommandType_name = map[int32]string{
		0: "UPDATE_INSTANCE",
	}
	CommandType_value = map[string]int32{
		"UPDATE_INSTANCE": 0,
	}
)

func (x CommandType) Enum() *CommandType {
	p := new(CommandType)
	*p = x
	return p
}

func (x CommandType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommandType) Descriptor() protoreflect.EnumDescriptor {
	return file_mcenter_apps_instance_pb_instance_proto_enumTypes[3].Descriptor()
}

func (CommandType) Type() protoreflect.EnumType {
	return &file_mcenter_apps_instance_pb_instance_proto_enumTypes[3]
}

func (x CommandType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommandType.Descriptor instead.
func (CommandType) EnumDescriptor() ([]byte, []int) {
	return file_mcenter_apps_instance_pb_instance_proto_rawDescGZIP(), []int{3}
}

// 服务实例信息, 比如 阿里云_杭州/生产环境/app01/default/instance01
type Instance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 实例Id
	// @gotags: bson:"_id" json:"id"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" bson:"_id"`
	// 服务所属域
	// @gotags: bson:"domain" json:"domain"
	Domain string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain" bson:"domain"`
	// 服务所属空间
	// @gotags: bson:"namespace" json:"namespace"
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace" bson:"namespace"`
	// 实例所属应用名称
	// @gotags: bson:"service_name" json:"service_name"
	ServiceName string `protobuf:"bytes,4,opt,name=service_name,json=serviceName,proto3" json:"service_name" bson:"service_name"`
	// 实例注册相关信息
	// @gotags: bson:"registry_info" json:"registry_info"
	RegistryInfo *RegistryRequest `protobuf:"bytes,5,opt,name=registry_info,json=registryInfo,proto3" json:"registry_info" bson:"registry_info"`
	// 实例状态
	// @gotags: bson:"status" json:"status"
	Status *Status `protobuf:"bytes,6,opt,name=status,proto3" json:"status" bson:"status"`
	// 实例配置
	// @gotags: bson:"config" json:"config"
	Config *Config `protobuf:"bytes,7,opt,name=config,proto3" json:"config" bson:"config"`
}

func (x *Instance) Reset() {
	*x = Instance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mcenter_apps_instance_pb_instance_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Instance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Instance) ProtoMessage() {}

func (x *Instance) ProtoReflect() protoreflect.Message {
	mi := &file_mcenter_apps_instance_pb_instance_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Instance.ProtoReflect.Descriptor instead.
func (*Instance) Descriptor() ([]byte, []int) {
	return file_mcenter_apps_instance_pb_instance_proto_rawDescGZIP(), []int{0}
}

func (x *Instance) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Instance) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *Instance) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Instance) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *Instance) GetRegistryInfo() *RegistryRequest {
	if x != nil {
		return x.RegistryInfo
	}
	return nil
}

func (x *Instance) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Instance) GetConfig() *Config {
	if x != nil {
		return x.Config
	}
	return nil
}

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 是否启用该实例
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// 配置更新时间
	// @gotags: bson:"update_at" json:"update_at"
	UpdateAt int64 `protobuf:"varint,2,opt,name=update_at,json=updateAt,proto3" json:"update_at" bson:"update_at"`
	// 配置更新人
	// @gotags: bson:"update_by" json:"update_by"
	UpdateBy int64 `protobuf:"varint,3,opt,name=update_by,json=updateBy,proto3" json:"update_by" bson:"update_by"`
	// 实例权重, 初始值通过注册设置, 注册后可以动态调整
	// @gotags: bson:"weight" json:"weight" toml:"weight" validate:"required"
	Weight uint32 `protobuf:"varint,4,opt,name=weight,proto3" json:"weight" bson:"weight" toml:"weight" validate:"required"`
	// 心跳设置
	// @gotags: bson:"heart_beat" json:"heart_beat"
	Heartbeat *HeartbeatConfig `protobuf:"bytes,5,opt,name=heartbeat,proto3" json:"heart_beat" bson:"heart_beat"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mcenter_apps_instance_pb_instance_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_mcenter_apps_instance_pb_instance_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_mcenter_apps_instance_pb_instance_proto_rawDescGZIP(), []int{1}
}

func (x *Config) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Config) GetUpdateAt() int64 {
	if x != nil {
		return x.UpdateAt
	}
	return 0
}

func (x *Config) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *Config) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Config) GetHeartbeat() *HeartbeatConfig {
	if x != nil {
		return x.Heartbeat
	}
	return nil
}

type HeartbeatConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 心跳间隔
	// @gotags: bson:"interval" json:"interval"
	Interval int32 `protobuf:"varint,1,opt,name=interval,proto3" json:"interval" bson:"interval"`
	// 心跳超时时间, 单位秒
	// @gotags: bson:"timeout" json:"timeout"
	Timeout int32 `protobuf:"varint,2,opt,name=timeout,proto3" json:"timeout" bson:"timeout"`
}

func (x *HeartbeatConfig) Reset() {
	*x = HeartbeatConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mcenter_apps_instance_pb_instance_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartbeatConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatConfig) ProtoMessage() {}

func (x *HeartbeatConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mcenter_apps_instance_pb_instance_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatConfig.ProtoReflect.Descriptor instead.
func (*HeartbeatConfig) Descriptor() ([]byte, []int) {
	return file_mcenter_apps_instance_pb_instance_proto_rawDescGZIP(), []int{2}
}

func (x *HeartbeatConfig) GetInterval() int32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *HeartbeatConfig) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

type InstanceSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 总个数
	// @gotags: bson:"status" json:"status"
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"status" bson:"status"`
	// 实例列表
	// @gotags: bson:"items" json:"items"
	Items []*Instance `protobuf:"bytes,2,rep,name=items,proto3" json:"items" bson:"items"`
}

func (x *InstanceSet) Reset() {
	*x = InstanceSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mcenter_apps_instance_pb_instance_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceSet) ProtoMessage() {}

func (x *InstanceSet) ProtoReflect() protoreflect.Message {
	mi := &file_mcenter_apps_instance_pb_instance_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceSet.ProtoReflect.Descriptor instead.
func (*InstanceSet) Descriptor() ([]byte, []int) {
	return file_mcenter_apps_instance_pb_instance_proto_rawDescGZIP(), []int{3}
}

func (x *InstanceSet) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *InstanceSet) GetItems() []*Instance {
	if x != nil {
		return x.Items
	}
	return nil
}

type RegistryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 提供注册提供方
	// @gotags: bson:"provider" json:"provider" toml:"provider" yaml:"provider" env:"MCENTER_INSTANCE_PROVIDER"
	Provider PROVIDER `protobuf:"varint,1,opt,name=provider,proto3,enum=infraboard.mcenter.instance.PROVIDER" json:"provider" bson:"provider" toml:"provider" yaml:"provider" env:"MCENTER_INSTANCE_PROVIDER"`
	// 实例所属地域, 默认default
	// @gotags: bson:"region" json:"region" toml:"region" yaml:"region" env:"MCENTER_INSTANCE_REGION" validate:"required"
	Region string `protobuf:"bytes,2,opt,name=region,proto3" json:"region" bson:"region" toml:"region" yaml:"region" env:"MCENTER_INSTANCE_REGION" validate:"required"`
	// 实例所属环境, 默认default
	// @gotags: bson:"environment" json:"environment" toml:"environment" yaml:"environment" env:"MCENTER_INSTANCE_ENV" validate:"required"
	Environment string `protobuf:"bytes,3,opt,name=environment,proto3" json:"environment" bson:"environment" toml:"environment" yaml:"environment" env:"MCENTER_INSTANCE_ENV" validate:"required"`
	// 实例所属集群, 默认default
	// @gotags: bson:"cluster" json:"cluster" toml:"cluster" yaml:"cluster" env:"MCENTER_INSTANCE_CLUSTER" validate:"required"
	Cluster string `protobuf:"bytes,14,opt,name=cluster,proto3" json:"cluster" bson:"cluster" toml:"cluster" yaml:"cluster" env:"MCENTER_INSTANCE_CLUSTER" validate:"required"`
	// 实例所属分组,默认default
	// @gotags: bson:"group" json:"group" toml:"group" yaml:"group" env:"MCENTER_INSTANCE_GROUP" validate:"required"
	Group string `protobuf:"bytes,4,opt,name=group,proto3" json:"group" bson:"group" toml:"group" yaml:"group" env:"MCENTER_INSTANCE_GROUP" validate:"required"`
	// 实例名称, 如果不传, 则会随机生成
	// @gotags: bson:"name" json:"name" toml:"name" yaml:"name" env:"MCENTER_INSTANCE_NAME"
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name" bson:"name" toml:"name" yaml:"name" env:"MCENTER_INSTANCE_NAME"`
	// 注册的对外的访问的协议
	// @gotags: bson:"protocal" json:"protocal" toml:"protocal" yaml:"protocal" env:"MCENTER_INSTANCE_PROTOCAL"
	Protocal PROTOCAL `protobuf:"varint,6,opt,name=protocal,proto3,enum=infraboard.mcenter.instance.PROTOCAL" json:"protocal" bson:"protocal" toml:"protocal" yaml:"protocal" env:"MCENTER_INSTANCE_PROTOCAL"`
	// 实例权重
	// @gotags: bson:"weight" json:"weight" toml:"weight" yaml:"weight" env:"MCENTER_INSTANCE_WEIGHT" validate:"required"
	Weight uint32 `protobuf:"varint,12,opt,name=weight,proto3" json:"weight" bson:"weight" toml:"weight" yaml:"weight" env:"MCENTER_INSTANCE_WEIGHT" validate:"required"`
	// 实例地址
	// @gotags: bson:"address" json:"address" toml:"address" yaml:"address" env:"MCENTER_INSTANCE_ADDRESS" validate:"required"
	Address string `protobuf:"bytes,7,opt,name=address,proto3" json:"address" bson:"address" toml:"address" yaml:"address" env:"MCENTER_INSTANCE_ADDRESS" validate:"required"`
	// 实例健康检查配置
	// @gotags: bson:"health_check" json:"health_check" toml:"health_check" yaml:"health_check"
	HealthCheck *HealthCheck `protobuf:"bytes,13,opt,name=health_check,json=healthCheck,proto3" json:"health_check" bson:"health_check" toml:"health_check" yaml:"health_check"`
	// 实例标签, 可以根据标签快速过滤实例
	// @gotags: bson:"labels" json:"labels" toml:"labels" yaml:"labels" env:"MCENTER_INSTANCE_LABELS"
	Labels map[string]string `protobuf:"bytes,9,rep,name=labels,proto3" json:"labels" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"labels" toml:"labels" yaml:"labels" env:"MCENTER_INSTANCE_LABELS"`
	// 实例元数据
	// @gotags: bson:"meta" json:"meta" toml:"meta" yaml:"meta" env:"MCENTER_INSTANCE_META"
	Meta map[string]string `protobuf:"bytes,11,rep,name=meta,proto3" json:"meta" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"meta" toml:"meta" yaml:"meta" env:"MCENTER_INSTANCE_META"`
	// 实例构建信息
	// @gotags: bson:"build" json:"build" toml:"build" yaml:"build"
	Build *Build `protobuf:"bytes,10,opt,name=build,proto3" json:"build" bson:"build" toml:"build" yaml:"build"`
}

func (x *RegistryRequest) Reset() {
	*x = RegistryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mcenter_apps_instance_pb_instance_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistryRequest) ProtoMessage() {}

func (x *RegistryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mcenter_apps_instance_pb_instance_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistryRequest.ProtoReflect.Descriptor instead.
func (*RegistryRequest) Descriptor() ([]byte, []int) {
	return file_mcenter_apps_instance_pb_instance_proto_rawDescGZIP(), []int{4}
}

func (x *RegistryRequest) GetProvider() PROVIDER {
	if x != nil {
		return x.Provider
	}
	return PROVIDER_SDK
}

func (x *RegistryRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *RegistryRequest) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *RegistryRequest) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *RegistryRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *RegistryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RegistryRequest) GetProtocal() PROTOCAL {
	if x != nil {
		return x.Protocal
	}
	return PROTOCAL_GRPC
}

func (x *RegistryRequest) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *RegistryRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *RegistryRequest) GetHealthCheck() *HealthCheck {
	if x != nil {
		return x.HealthCheck
	}
	return nil
}

func (x *RegistryRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *RegistryRequest) GetMeta() map[string]string {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *RegistryRequest) GetBuild() *Build {
	if x != nil {
		return x.Build
	}
	return nil
}

type HealthCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 健康检查URL
	// @gotags: bson:"path" json:"path" toml:"path" yaml:"path" env:"MCENTER_HEALTH_CHECK_PATH"
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path" bson:"path" toml:"path" yaml:"path" env:"MCENTER_HEALTH_CHECK_PATH"`
	// 健康检查时间间隔, 单位秒
	// @gotags: bson:"interval" json:"interval" toml:"interval" yaml:"interval" env:"MCENTER_HEALTH_CHECK_INTERVAL"
	Interval int32 `protobuf:"varint,2,opt,name=interval,proto3" json:"interval" bson:"interval" toml:"interval" yaml:"interval" env:"MCENTER_HEALTH_CHECK_INTERVAL"`
	// 健康健康操时时间, 单位秒
	// @gotags: bson:"timeout" json:"timeout" toml:"timeout" yaml:"timeout" env:"MCENTER_HEALTH_CHECK_TIMEOUT"
	Timeout int32 `protobuf:"varint,3,opt,name=timeout,proto3" json:"timeout" bson:"timeout" toml:"timeout" yaml:"timeout" env:"MCENTER_HEALTH_CHECK_TIMEOUT"`
}

func (x *HealthCheck) Reset() {
	*x = HealthCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mcenter_apps_instance_pb_instance_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheck) ProtoMessage() {}

func (x *HealthCheck) ProtoReflect() protoreflect.Message {
	mi := &file_mcenter_apps_instance_pb_instance_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheck.ProtoReflect.Descriptor instead.
func (*HealthCheck) Descriptor() ([]byte, []int) {
	return file_mcenter_apps_instance_pb_instance_proto_rawDescGZIP(), []int{5}
}

func (x *HealthCheck) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *HealthCheck) GetInterval() int32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *HealthCheck) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

// 实例构建相关信息
type Build struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 实例版本
	// @gotags: bson:"version" json:"version" toml:"version" yaml:"version" env:"MCENTER_BUILD_VERSION"
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version" bson:"version" toml:"version" yaml:"version" env:"MCENTER_BUILD_VERSION"`
	// 实例代码构建对应分支
	// @gotags: bson:"git_branch" json:"git_branch" toml:"git_branch" yaml:"git_branch" env:"MCENTER_BUILD_GIT_BRANCH"
	GitBranch string `protobuf:"bytes,2,opt,name=git_branch,json=gitBranch,proto3" json:"git_branch" bson:"git_branch" toml:"git_branch" yaml:"git_branch" env:"MCENTER_BUILD_GIT_BRANCH"`
	// 实例代码对应commit号
	// @gotags: bson:"git_commit" json:"git_commit" toml:"git_commit" yaml:"git_commit" env:"MCENTER_BUILD_GIT_COMMIT"
	GitCommit string `protobuf:"bytes,3,opt,name=git_commit,json=gitCommit,proto3" json:"git_commit" bson:"git_commit" toml:"git_commit" yaml:"git_commit" env:"MCENTER_BUILD_GIT_COMMIT"`
	// 实例构建时间
	// @gotags: bson:"build_at" json:"build_at" toml:"build_at" yaml:"build_at" env:"MCENTER_BUILD_AT"
	BuildAt int64 `protobuf:"varint,4,opt,name=build_at,json=buildAt,proto3" json:"build_at" bson:"build_at" toml:"build_at" yaml:"build_at" env:"MCENTER_BUILD_AT"`
}

func (x *Build) Reset() {
	*x = Build{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mcenter_apps_instance_pb_instance_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Build) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Build) ProtoMessage() {}

func (x *Build) ProtoReflect() protoreflect.Message {
	mi := &file_mcenter_apps_instance_pb_instance_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Build.ProtoReflect.Descriptor instead.
func (*Build) Descriptor() ([]byte, []int) {
	return file_mcenter_apps_instance_pb_instance_proto_rawDescGZIP(), []int{6}
}

func (x *Build) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Build) GetGitBranch() string {
	if x != nil {
		return x.GitBranch
	}
	return ""
}

func (x *Build) GetGitCommit() string {
	if x != nil {
		return x.GitCommit
	}
	return ""
}

func (x *Build) GetBuildAt() int64 {
	if x != nil {
		return x.BuildAt
	}
	return 0
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 上线时间
	// @gotags: bson:"online" json:"online"
	Online int64 `protobuf:"varint,1,opt,name=online,proto3" json:"online" bson:"online"`
	// 服务状态
	// @gotags: bson:"stage" json:"stage"
	Stage STAGE `protobuf:"varint,2,opt,name=stage,proto3,enum=infraboard.mcenter.instance.STAGE" json:"stage" bson:"stage"`
	// 状态更新时间
	// @gotags: bson:"update_at" json:"update_at"
	UpdateAt int64 `protobuf:"varint,3,opt,name=update_at,json=updateAt,proto3" json:"update_at" bson:"update_at"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mcenter_apps_instance_pb_instance_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_mcenter_apps_instance_pb_instance_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_mcenter_apps_instance_pb_instance_proto_rawDescGZIP(), []int{7}
}

func (x *Status) GetOnline() int64 {
	if x != nil {
		return x.Online
	}
	return 0
}

func (x *Status) GetStage() STAGE {
	if x != nil {
		return x.Stage
	}
	return STAGE_ALIVE
}

func (x *Status) GetUpdateAt() int64 {
	if x != nil {
		return x.UpdateAt
	}
	return 0
}

type HeartbeatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 实例Id
	// @gotags: bson:"instance_id" json:"instance_id"
	InstanceId string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id" bson:"instance_id"`
}

func (x *HeartbeatRequest) Reset() {
	*x = HeartbeatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mcenter_apps_instance_pb_instance_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartbeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatRequest) ProtoMessage() {}

func (x *HeartbeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mcenter_apps_instance_pb_instance_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatRequest.ProtoReflect.Descriptor instead.
func (*HeartbeatRequest) Descriptor() ([]byte, []int) {
	return file_mcenter_apps_instance_pb_instance_proto_rawDescGZIP(), []int{8}
}

func (x *HeartbeatRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

type RemoteCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 客户端需要执行命令类型
	// @gotags: bson:"type" json:"type"
	Type CommandType `protobuf:"varint,1,opt,name=type,proto3,enum=infraboard.mcenter.instance.CommandType" json:"type" bson:"type"`
	// 指令参数
	// @gotags: bson:"params" json:"params"
	Params map[string]string `protobuf:"bytes,2,rep,name=params,proto3" json:"params" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"params"`
}

func (x *RemoteCommand) Reset() {
	*x = RemoteCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mcenter_apps_instance_pb_instance_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteCommand) ProtoMessage() {}

func (x *RemoteCommand) ProtoReflect() protoreflect.Message {
	mi := &file_mcenter_apps_instance_pb_instance_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteCommand.ProtoReflect.Descriptor instead.
func (*RemoteCommand) Descriptor() ([]byte, []int) {
	return file_mcenter_apps_instance_pb_instance_proto_rawDescGZIP(), []int{9}
}

func (x *RemoteCommand) GetType() CommandType {
	if x != nil {
		return x.Type
	}
	return CommandType_UPDATE_INSTANCE
}

func (x *RemoteCommand) GetParams() map[string]string {
	if x != nil {
		return x.Params
	}
	return nil
}

type HeartbeatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 客户端下一次心跳包的发送间隔, 单位秒
	// @gotags: bson:"next" json:"next"
	Next int32 `protobuf:"varint,1,opt,name=next,proto3" json:"next" bson:"next"`
	// 客户端需要执行命令
	// @gotags: bson:"remote_command" json:"remote_command"
	RemoteCommand *RemoteCommand `protobuf:"bytes,2,opt,name=remote_command,json=remoteCommand,proto3" json:"remote_command" bson:"remote_command"`
}

func (x *HeartbeatResponse) Reset() {
	*x = HeartbeatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mcenter_apps_instance_pb_instance_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartbeatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatResponse) ProtoMessage() {}

func (x *HeartbeatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mcenter_apps_instance_pb_instance_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatResponse.ProtoReflect.Descriptor instead.
func (*HeartbeatResponse) Descriptor() ([]byte, []int) {
	return file_mcenter_apps_instance_pb_instance_proto_rawDescGZIP(), []int{10}
}

func (x *HeartbeatResponse) GetNext() int32 {
	if x != nil {
		return x.Next
	}
	return 0
}

func (x *HeartbeatResponse) GetRemoteCommand() *RemoteCommand {
	if x != nil {
		return x.RemoteCommand
	}
	return nil
}

var File_mcenter_apps_instance_pb_instance_proto protoreflect.FileDescriptor

var file_mcenter_apps_instance_pb_instance_proto_rawDesc = []byte{
	0x0a, 0x27, 0x6d, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x70, 0x62, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xc0, 0x02, 0x0a, 0x08, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x0d,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x2e, 0x6d, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x63, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x63, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xc0, 0x01, 0x0a, 0x06, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x4a, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x2e, 0x6d, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x22, 0x47, 0x0a, 0x0f,
	0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x60, 0x0a, 0x0b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xe0, 0x05, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x52, 0x4f, 0x56,
	0x49, 0x44, 0x45, 0x52, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25,
	0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x63, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x41, 0x4c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x61, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x4b, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x50,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x63, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x4a, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x63, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x05,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52,
	0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x37, 0x0a, 0x09, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x57, 0x0a, 0x0b, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x22, 0x7a, 0x0a, 0x05, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x69, 0x74, 0x5f, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x69, 0x74, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x69, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x74, 0x22,
	0x77, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x22, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x53,
	0x54, 0x41, 0x47, 0x45, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x22, 0x33, 0x0a, 0x10, 0x48, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0xd8, 0x01,
	0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12,
	0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x39, 0x0a,
	0x0b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7a, 0x0a, 0x11, 0x48, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6e, 0x65, 0x78,
	0x74, 0x12, 0x51, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x2a, 0x1e, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x41, 0x4c,
	0x12, 0x08, 0x0a, 0x04, 0x47, 0x52, 0x50, 0x43, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x54,
	0x54, 0x50, 0x10, 0x01, 0x2a, 0x23, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52,
	0x12, 0x07, 0x0a, 0x03, 0x53, 0x44, 0x4b, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4b, 0x55, 0x42,
	0x45, 0x52, 0x4e, 0x45, 0x54, 0x45, 0x53, 0x10, 0x01, 0x2a, 0x12, 0x0a, 0x05, 0x53, 0x54, 0x41,
	0x47, 0x45, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x4c, 0x49, 0x56, 0x45, 0x10, 0x00, 0x2a, 0x22, 0x0a,
	0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10,
	0x00, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x6d, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mcenter_apps_instance_pb_instance_proto_rawDescOnce sync.Once
	file_mcenter_apps_instance_pb_instance_proto_rawDescData = file_mcenter_apps_instance_pb_instance_proto_rawDesc
)

func file_mcenter_apps_instance_pb_instance_proto_rawDescGZIP() []byte {
	file_mcenter_apps_instance_pb_instance_proto_rawDescOnce.Do(func() {
		file_mcenter_apps_instance_pb_instance_proto_rawDescData = protoimpl.X.CompressGZIP(file_mcenter_apps_instance_pb_instance_proto_rawDescData)
	})
	return file_mcenter_apps_instance_pb_instance_proto_rawDescData
}

var file_mcenter_apps_instance_pb_instance_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_mcenter_apps_instance_pb_instance_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_mcenter_apps_instance_pb_instance_proto_goTypes = []interface{}{
	(PROTOCAL)(0),             // 0: infraboard.mcenter.instance.PROTOCAL
	(PROVIDER)(0),             // 1: infraboard.mcenter.instance.PROVIDER
	(STAGE)(0),                // 2: infraboard.mcenter.instance.STAGE
	(CommandType)(0),          // 3: infraboard.mcenter.instance.CommandType
	(*Instance)(nil),          // 4: infraboard.mcenter.instance.Instance
	(*Config)(nil),            // 5: infraboard.mcenter.instance.Config
	(*HeartbeatConfig)(nil),   // 6: infraboard.mcenter.instance.HeartbeatConfig
	(*InstanceSet)(nil),       // 7: infraboard.mcenter.instance.InstanceSet
	(*RegistryRequest)(nil),   // 8: infraboard.mcenter.instance.RegistryRequest
	(*HealthCheck)(nil),       // 9: infraboard.mcenter.instance.HealthCheck
	(*Build)(nil),             // 10: infraboard.mcenter.instance.Build
	(*Status)(nil),            // 11: infraboard.mcenter.instance.Status
	(*HeartbeatRequest)(nil),  // 12: infraboard.mcenter.instance.HeartbeatRequest
	(*RemoteCommand)(nil),     // 13: infraboard.mcenter.instance.RemoteCommand
	(*HeartbeatResponse)(nil), // 14: infraboard.mcenter.instance.HeartbeatResponse
	nil,                       // 15: infraboard.mcenter.instance.RegistryRequest.LabelsEntry
	nil,                       // 16: infraboard.mcenter.instance.RegistryRequest.MetaEntry
	nil,                       // 17: infraboard.mcenter.instance.RemoteCommand.ParamsEntry
}
var file_mcenter_apps_instance_pb_instance_proto_depIdxs = []int32{
	8,  // 0: infraboard.mcenter.instance.Instance.registry_info:type_name -> infraboard.mcenter.instance.RegistryRequest
	11, // 1: infraboard.mcenter.instance.Instance.status:type_name -> infraboard.mcenter.instance.Status
	5,  // 2: infraboard.mcenter.instance.Instance.config:type_name -> infraboard.mcenter.instance.Config
	6,  // 3: infraboard.mcenter.instance.Config.heartbeat:type_name -> infraboard.mcenter.instance.HeartbeatConfig
	4,  // 4: infraboard.mcenter.instance.InstanceSet.items:type_name -> infraboard.mcenter.instance.Instance
	1,  // 5: infraboard.mcenter.instance.RegistryRequest.provider:type_name -> infraboard.mcenter.instance.PROVIDER
	0,  // 6: infraboard.mcenter.instance.RegistryRequest.protocal:type_name -> infraboard.mcenter.instance.PROTOCAL
	9,  // 7: infraboard.mcenter.instance.RegistryRequest.health_check:type_name -> infraboard.mcenter.instance.HealthCheck
	15, // 8: infraboard.mcenter.instance.RegistryRequest.labels:type_name -> infraboard.mcenter.instance.RegistryRequest.LabelsEntry
	16, // 9: infraboard.mcenter.instance.RegistryRequest.meta:type_name -> infraboard.mcenter.instance.RegistryRequest.MetaEntry
	10, // 10: infraboard.mcenter.instance.RegistryRequest.build:type_name -> infraboard.mcenter.instance.Build
	2,  // 11: infraboard.mcenter.instance.Status.stage:type_name -> infraboard.mcenter.instance.STAGE
	3,  // 12: infraboard.mcenter.instance.RemoteCommand.type:type_name -> infraboard.mcenter.instance.CommandType
	17, // 13: infraboard.mcenter.instance.RemoteCommand.params:type_name -> infraboard.mcenter.instance.RemoteCommand.ParamsEntry
	13, // 14: infraboard.mcenter.instance.HeartbeatResponse.remote_command:type_name -> infraboard.mcenter.instance.RemoteCommand
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_mcenter_apps_instance_pb_instance_proto_init() }
func file_mcenter_apps_instance_pb_instance_proto_init() {
	if File_mcenter_apps_instance_pb_instance_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mcenter_apps_instance_pb_instance_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Instance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mcenter_apps_instance_pb_instance_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mcenter_apps_instance_pb_instance_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartbeatConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mcenter_apps_instance_pb_instance_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mcenter_apps_instance_pb_instance_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mcenter_apps_instance_pb_instance_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mcenter_apps_instance_pb_instance_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Build); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mcenter_apps_instance_pb_instance_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mcenter_apps_instance_pb_instance_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartbeatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mcenter_apps_instance_pb_instance_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mcenter_apps_instance_pb_instance_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartbeatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mcenter_apps_instance_pb_instance_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mcenter_apps_instance_pb_instance_proto_goTypes,
		DependencyIndexes: file_mcenter_apps_instance_pb_instance_proto_depIdxs,
		EnumInfos:         file_mcenter_apps_instance_pb_instance_proto_enumTypes,
		MessageInfos:      file_mcenter_apps_instance_pb_instance_proto_msgTypes,
	}.Build()
	File_mcenter_apps_instance_pb_instance_proto = out.File
	file_mcenter_apps_instance_pb_instance_proto_rawDesc = nil
	file_mcenter_apps_instance_pb_instance_proto_goTypes = nil
	file_mcenter_apps_instance_pb_instance_proto_depIdxs = nil
}
